{"ast":null,"code":"import createList from '../builders/build-list.mjs';\nimport { isHorizontal } from '../utils.mjs';\nimport { AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, SMART_ALIGNMENT } from '../defaults.mjs';\nconst FixedSizeList = createList({\n  name: \"ElFixedSizeList\",\n  getItemOffset: ({\n    itemSize\n  }, index) => index * itemSize,\n  getItemSize: ({\n    itemSize\n  }) => itemSize,\n  getEstimatedTotalSize: ({\n    total,\n    itemSize\n  }) => itemSize * total,\n  getOffset: ({\n    height,\n    total,\n    itemSize,\n    layout,\n    width\n  }, index, alignment, scrollOffset) => {\n    const size = isHorizontal(layout) ? width : height;\n    const lastItemOffset = Math.max(0, total * itemSize - size);\n    const maxOffset = Math.min(lastItemOffset, index * itemSize);\n    const minOffset = Math.max(0, (index + 1) * itemSize - size);\n    if (alignment === SMART_ALIGNMENT) {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        alignment = AUTO_ALIGNMENT;\n      } else {\n        alignment = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case START_ALIGNMENT:\n        {\n          return maxOffset;\n        }\n      case END_ALIGNMENT:\n        {\n          return minOffset;\n        }\n      case CENTERED_ALIGNMENT:\n        {\n          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0;\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        {\n          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n            return scrollOffset;\n          } else if (scrollOffset < minOffset) {\n            return minOffset;\n          } else {\n            return maxOffset;\n          }\n        }\n    }\n  },\n  getStartIndexForOffset: ({\n    total,\n    itemSize\n  }, offset) => Math.max(0, Math.min(total - 1, Math.floor(offset / itemSize))),\n  getStopIndexForStartIndex: ({\n    height,\n    total,\n    itemSize,\n    layout,\n    width\n  }, startIndex, scrollOffset) => {\n    const offset = startIndex * itemSize;\n    const size = isHorizontal(layout) ? width : height;\n    const numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(total - 1, startIndex + numVisibleItems - 1));\n  },\n  initCache() {\n    return void 0;\n  },\n  clearCache: true,\n  validateProps() {}\n});\nexport { FixedSizeList as default };","map":{"version":3,"names":["FixedSizeList","createList","name","getItemOffset","itemSize","index","getItemSize","getEstimatedTotalSize","total","getOffset","height","layout","width","alignment","scrollOffset","size","isHorizontal","lastItemOffset","Math","max","maxOffset","min","minOffset","SMART_ALIGNMENT","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","middleOffset","round","ceil","floor","getStartIndexForOffset","offset","getStopIndexForStartIndex","startIndex","numVisibleItems","initCache","clearCache","validateProps"],"sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-list.ts"],"sourcesContent":["import { isString, throwError } from '@element-plus/utils'\nimport buildList from '../builders/build-list'\nimport { isHorizontal } from '../utils'\nimport {\n  AUTO_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  END_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n} from '../defaults'\n\nimport type { VirtualizedListProps } from '../props'\n\ntype Props = VirtualizedListProps\n\nconst FixedSizeList = buildList({\n  name: 'ElFixedSizeList',\n  getItemOffset: ({ itemSize }, index) => index * (itemSize as number),\n\n  getItemSize: ({ itemSize }) => itemSize as number,\n\n  getEstimatedTotalSize: ({ total, itemSize }) => (itemSize as number) * total,\n\n  getOffset: (\n    { height, total, itemSize, layout, width },\n    index,\n    alignment,\n    scrollOffset\n  ) => {\n    const size = (isHorizontal(layout) ? width : height) as number\n    if (process.env.NODE_ENV !== 'production' && isString(size)) {\n      throwError(\n        '[ElVirtualList]',\n        `\n        You should set\n          width/height\n        to number when your layout is\n          horizontal/vertical\n      `\n      )\n    }\n    const lastItemOffset = Math.max(0, total * (itemSize as number) - size)\n    const maxOffset = Math.min(lastItemOffset, index * (itemSize as number))\n    const minOffset = Math.max(0, (index + 1) * (itemSize as number) - size)\n\n    if (alignment === SMART_ALIGNMENT) {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT: {\n        return maxOffset\n      }\n      case END_ALIGNMENT: {\n        return minOffset\n      }\n      case CENTERED_ALIGNMENT: {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0 // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset // near the end\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default: {\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset\n        } else if (scrollOffset < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n      }\n    }\n  },\n\n  getStartIndexForOffset: ({ total, itemSize }, offset) =>\n    Math.max(0, Math.min(total - 1, Math.floor(offset / (itemSize as number)))),\n\n  getStopIndexForStartIndex: (\n    { height, total, itemSize, layout, width }: Props,\n    startIndex: number,\n    scrollOffset: number\n  ) => {\n    const offset = startIndex * (itemSize as number)\n    const size = isHorizontal(layout) ? width : height\n    const numVisibleItems = Math.ceil(\n      ((size as number) + scrollOffset - offset) / (itemSize as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        total - 1,\n        // because startIndex is inclusive, so in order to prevent array outbound indexing\n        // we need to - 1 to prevent outbound behavior\n        startIndex + numVisibleItems - 1\n      )\n    )\n  },\n\n  /**\n   * Fixed size list does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache() {\n    return undefined as any\n  },\n\n  clearCache: true,\n\n  validateProps() {},\n})\n\nexport type FixedSizeListInstance = InstanceType<typeof FixedSizeList> & unknown\nexport default FixedSizeList\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}