{"ast":null,"code":"import { defineComponent, inject, ref, toRef, openBlock, createBlock, unref, normalizeClass, withCtx, renderSlot, nextTick } from 'vue';\nimport '../../popper/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './constants.mjs';\nimport { useTooltipTriggerProps } from './trigger.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperTrigger from '../../popper/src/trigger2.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { focusElement } from '../../../utils/dom/aria.mjs';\nconst __default__ = defineComponent({\n  name: \"ElTooltipTrigger\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: useTooltipTriggerProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"tooltip\");\n    const {\n      controlled,\n      id,\n      open,\n      onOpen,\n      onClose,\n      onToggle\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const triggerRef = ref(null);\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n    const trigger = toRef(props, \"trigger\");\n    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", e => {\n      onOpen(e);\n      if (props.focusOnTarget && e.target) {\n        nextTick(() => {\n          focusElement(e.target, {\n            preventScroll: true\n          });\n        });\n      }\n    }));\n    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", e => {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", e => {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, e => {\n      const {\n        code\n      } = e;\n      if (props.triggerKeys.includes(code)) {\n        e.preventDefault();\n        onToggle(e);\n      }\n    });\n    expose({\n      triggerRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElPopperTrigger), {\n        id: unref(id),\n        \"virtual-ref\": _ctx.virtualRef,\n        open: unref(open),\n        \"virtual-triggering\": _ctx.virtualTriggering,\n        class: normalizeClass(unref(ns).e(\"trigger\")),\n        onBlur: unref(onBlur),\n        onClick: unref(onClick),\n        onContextmenu: unref(onContextMenu),\n        onFocus: unref(onFocus),\n        onMouseenter: unref(onMouseenter),\n        onMouseleave: unref(onMouseleave),\n        onKeydown: unref(onKeydown)\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n    };\n  }\n});\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"trigger.vue\"]]);\nexport { ElTooltipTrigger as default };","map":{"version":3,"names":["name","ns","useNamespace","controlled","id","open","onOpen","onClose","onToggle","inject","TOOLTIP_INJECTION_KEY","triggerRef","ref","stopWhenControlledOrDisabled","unref","props","disabled","trigger","toRef","onMouseenter","composeEventHandlers","whenTrigger","e","focusOnTarget","target","nextTick","focusElement","preventScroll","onMouseleave","onClick","button","onFocus","onBlur","onContextMenu","preventDefault","onKeydown","code","triggerKeys","includes","expose","_ctx","_cache","openBlock","createBlock","ElPopperTrigger","virtualRef","virtualTriggering","class","normalizeClass","onContextmenu","default","withCtx","renderSlot","$slots","_","ElTooltipTrigger","_export_sfc","_sfc_main"],"sources":["../../../../../../packages/components/tooltip/src/trigger.vue"],"sourcesContent":["<template>\n  <el-popper-trigger\n    :id=\"id\"\n    :virtual-ref=\"virtualRef\"\n    :open=\"open\"\n    :virtual-triggering=\"virtualTriggering\"\n    :class=\"ns.e('trigger')\"\n    @blur=\"onBlur\"\n    @click=\"onClick\"\n    @contextmenu=\"onContextMenu\"\n    @focus=\"onFocus\"\n    @mouseenter=\"onMouseenter\"\n    @mouseleave=\"onMouseleave\"\n    @keydown=\"onKeydown\"\n  >\n    <slot />\n  </el-popper-trigger>\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject, nextTick, ref, toRef, unref } from 'vue'\nimport { ElPopperTrigger } from '@element-plus/components/popper'\nimport { composeEventHandlers, focusElement } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { TOOLTIP_INJECTION_KEY } from './constants'\nimport { useTooltipTriggerProps } from './trigger'\nimport { whenTrigger } from './utils'\n\nimport type { OnlyChildExpose } from '@element-plus/components/slot'\n\ndefineOptions({\n  name: 'ElTooltipTrigger',\n})\n\nconst props = defineProps(useTooltipTriggerProps)\n\nconst ns = useNamespace('tooltip')\nconst { controlled, id, open, onOpen, onClose, onToggle } = inject(\n  TOOLTIP_INJECTION_KEY,\n  undefined\n)!\n\nconst triggerRef = ref<OnlyChildExpose | null>(null)\n\nconst stopWhenControlledOrDisabled = () => {\n  if (unref(controlled) || props.disabled) {\n    return true\n  }\n}\nconst trigger = toRef(props, 'trigger')\nconst onMouseenter = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'hover', (e) => {\n    onOpen(e)\n\n    if (props.focusOnTarget && e.target) {\n      nextTick(() => {\n        focusElement(e.target as HTMLElement, { preventScroll: true })\n      })\n    }\n  })\n)\nconst onMouseleave = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'hover', onClose)\n)\nconst onClick = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'click', (e) => {\n    // distinguish left click\n    if ((e as MouseEvent).button === 0) {\n      onToggle(e)\n    }\n  })\n)\n\nconst onFocus = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'focus', onOpen)\n)\n\nconst onBlur = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'focus', onClose)\n)\n\nconst onContextMenu = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'contextmenu', (e: Event) => {\n    e.preventDefault()\n    onToggle(e)\n  })\n)\n\nconst onKeydown = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  (e: KeyboardEvent) => {\n    const { code } = e\n    if (props.triggerKeys.includes(code)) {\n      e.preventDefault()\n      onToggle(e)\n    }\n  }\n)\n\ndefineExpose({\n  /**\n   * @description trigger element\n   */\n  triggerRef,\n})\n</script>\n"],"mappings":";;;;;;;;;;mCA8Bc;EACZA,IAAM;AACR;;;;;;;;IAIM,MAAAC,EAAA,GAAKC,YAAA,CAAa,SAAS;IACjC,MAAM;MAAEC,UAAY;MAAAC,EAAA;MAAIC,IAAA;MAAMC,MAAQ;MAAAC,OAAA;MAASC;IAAA,CAAa,GAAAC,MAAA,CAAAC,qBAAA;IAC1D,MAAAC,UAAA,GAAAC,GAAA;IACA,MAAAC,4BAAA,GAAAA,CAAA;MACF,IAAAC,KAAA,CAAAX,UAAA,KAAAY,KAAA,CAAAC,QAAA;QAEM;MAEN;IACE;IACS,MAAAC,OAAA,GAAAC,KAAA,CAAAH,KAAA;IACT,MAAAI,YAAA,GAAAC,oBAAA,CAAAP,4BAAA,EAAAQ,WAAA,CAAAJ,OAAA,WAAAK,CAAA;MACFhB,MAAA,CAAAgB,CAAA;MACM,IAAAP,KAAA,CAAAQ,aAAgB,IAAOD,CAAS,CAAAE,MAAA;QACtCC,QAAqB;UACnBC,YAAA,CAAAJ,CAAA,CAAAE,MAAA;YAAAG,aAAA;UAAA;QAAA,CACY;MACV;IAEA,CAAI;IACF,MAAAC,YAAe,GAAAR,oBAAA,CAAAP,4BAAA,EAAAQ,WAAA,CAAAJ,OAAA,WAAAV,OAAA;IACb,MAAAsB,OAAA,GAAAT,oBAAwC,CAAAP,4BAAqB,EAAAQ,WAAA,CAAAJ,OAAA,WAAAK,CAAA;MAAA,IAC/DA,CAAC,CAAAQ,MAAA;QACHtB,QAAA,CAAAc,CAAA;MAAA;IACD,CACH;IACA,MAAMS,OAAe,GAAAX,oBAAA,CAAAP,4BAAA,EAAAQ,WAAA,CAAAJ,OAAA,WAAAX,MAAA;IACnB,MAAA0B,MAAA,GAAAZ,oBAAA,CAAAP,4BAAA,EAAAQ,WAAA,CAAAJ,OAAA,WAAAV,OAAA;IACA,MAAA0B,aAAqB,GAAAb,oBAAgB,CAAAP,4BAAA,EAAAQ,WAAA,CAAAJ,OAAA,iBAAAK,CAAA;MACvCA,CAAA,CAAAY,cAAA;MACA1B,QAAgB,CAAAc,CAAA;IAAA,CACd;IAAA,MACYa,SAAA,GAAAf,oBAAyB,CAAAP,4BAAA,EAAAS,CAAA;MAE9B;QAAiBc;MAAA,IAAAd,CAAA;MACpB,IAAAP,KAAA,CAAAsB,WAAU,CAAAC,QAAA,CAAAF,IAAA;QACZd,CAAA,CAAAY,cAAA;QACD1B,QAAA,CAAAc,CAAA;MAAA;IAGH;IACEiB,MAAA;MACA5B;IAAoC,CACtC;IAEA,OAAe,CAAA6B,IAAA,EAAAC,MAAA;MACb,OAAAC,SAAA,IAAAC,WAAA,CAAA7B,KAAA,CAAA8B,eAAA;QACAxC,EAAA,EAAAU,KAAY,CAASV,EAAA;QACvB,eAAAoC,IAAA,CAAAK,UAAA;QAEAxC,IAAsB,EAAAS,KAAA,CAAAT,IAAA;QACpB,sBAAAmC,IAAA,CAAAM,iBAAA;QACYC,KAAA,EAAAC,cAAwB,CAAAlC,KAAA,CAAAb,EAAA,EAAAqB,CAAC,CAAa;QAChDU,MAAiB,EAAAlB,KAAA,CAAAkB,MAAA;QACjBH,OAAA,EAASf,KAAC,CAAAe,OAAA;QACXoB,aAAA,EAAAnC,KAAA,CAAAmB,aAAA;QACHF,OAAA,EAAAjB,KAAA,CAAAiB,OAAA;QAEAZ,YAAkB,EAAAL,KAAA,CAAAK,YAAA;QAChBS,YAAA,EAAAd,KAAA,CAAAc,YAAA;QACsBO,SAAA,EAAArB,KAAA,CAAAqB,SAAA;MACpB,CAAM;QACNe,OAAU,EAAAC,OAAA,OAAqB,CAC7BC,UAAiB,CAAAZ,IAAA,CAAAa,MAAA,aACjB;QACFC,CAAA;MAAA,CACF;IAAA,CACF;EAEA;AAAa;AAAA,IAAAC,gBAAA,kBAAAC,WAAA,CAAAC,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}