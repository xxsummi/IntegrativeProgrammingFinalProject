{"ast":null,"code":"import { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useAriaProps } from '../../../hooks/use-aria/index.mjs';\nimport { isNumber } from '../../../utils/types.mjs';\nconst scrollbarProps = buildProps({\n  distance: {\n    type: Number,\n    default: 0\n  },\n  height: {\n    type: [String, Number],\n    default: \"\"\n  },\n  maxHeight: {\n    type: [String, Number],\n    default: \"\"\n  },\n  native: Boolean,\n  wrapStyle: {\n    type: definePropType([String, Object, Array]),\n    default: \"\"\n  },\n  wrapClass: {\n    type: [String, Array],\n    default: \"\"\n  },\n  viewClass: {\n    type: [String, Array],\n    default: \"\"\n  },\n  viewStyle: {\n    type: [String, Array, Object],\n    default: \"\"\n  },\n  noresize: Boolean,\n  tag: {\n    type: String,\n    default: \"div\"\n  },\n  always: Boolean,\n  minSize: {\n    type: Number,\n    default: 20\n  },\n  tabindex: {\n    type: [String, Number],\n    default: void 0\n  },\n  id: String,\n  role: String,\n  ...useAriaProps([\"ariaLabel\", \"ariaOrientation\"])\n});\nconst scrollbarEmits = {\n  \"end-reached\": direction => [\"left\", \"right\", \"top\", \"bottom\"].includes(direction),\n  scroll: ({\n    scrollTop,\n    scrollLeft\n  }) => [scrollTop, scrollLeft].every(isNumber)\n};\nexport { scrollbarEmits, scrollbarProps };","map":{"version":3,"names":["scrollbarProps","buildProps","distance","type","Number","default","height","String","maxHeight","native","Boolean","wrapStyle","definePropType","Object","Array","wrapClass","viewClass","viewStyle","noresize","tag","always","minSize","tabindex","id","role","useAriaProps","scrollbarEmits","direction","includes","scroll","scrollTop","scrollLeft","every","isNumber"],"sources":["../../../../../../packages/components/scrollbar/src/scrollbar.ts"],"sourcesContent":["import { buildProps, definePropType, isNumber } from '@element-plus/utils'\nimport { useAriaProps } from '@element-plus/hooks'\n\nimport type {\n  ExtractPropTypes,\n  StyleValue,\n  __ExtractPublicPropTypes,\n} from 'vue'\nimport type Scrollbar from './scrollbar.vue'\n\nexport const scrollbarProps = buildProps({\n  /**\n   * @description trigger distance(px)\n   */\n  distance: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description height of scrollbar\n   */\n  height: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description max height of scrollbar\n   */\n  maxHeight: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description whether to use the native scrollbar\n   */\n  native: Boolean,\n  /**\n   * @description style of wrap\n   */\n  wrapStyle: {\n    type: definePropType<StyleValue>([String, Object, Array]),\n    default: '',\n  },\n  /**\n   * @description class of wrap\n   */\n  wrapClass: {\n    type: [String, Array],\n    default: '',\n  },\n  /**\n   * @description class of view\n   */\n  viewClass: {\n    type: [String, Array],\n    default: '',\n  },\n  /**\n   * @description style of view\n   */\n  viewStyle: {\n    type: [String, Array, Object],\n    default: '',\n  },\n  /**\n   * @description do not respond to container size changes, if the container size does not change, it is better to set it to optimize performance\n   */\n  noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能\n  /**\n   * @description element tag of the view\n   */\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  /**\n   * @description always show\n   */\n  always: Boolean,\n  /**\n   * @description minimum size of scrollbar\n   */\n  minSize: {\n    type: Number,\n    default: 20,\n  },\n  /**\n   * @description Wrap tabindex\n   */\n  tabindex: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description id of view\n   */\n  id: String,\n  /**\n   * @description role of view\n   */\n  role: String,\n  ...useAriaProps(['ariaLabel', 'ariaOrientation']),\n} as const)\nexport type ScrollbarProps = ExtractPropTypes<typeof scrollbarProps>\nexport type ScrollbarPropsPublic = __ExtractPublicPropTypes<\n  typeof scrollbarProps\n>\n\nexport const scrollbarEmits = {\n  'end-reached': (direction: ScrollbarDirection) =>\n    ['left', 'right', 'top', 'bottom'].includes(direction),\n  scroll: ({\n    scrollTop,\n    scrollLeft,\n  }: {\n    scrollTop: number\n    scrollLeft: number\n  }) => [scrollTop, scrollLeft].every(isNumber),\n}\nexport type ScrollbarEmits = typeof scrollbarEmits\nexport type ScrollbarDirection = 'top' | 'bottom' | 'left' | 'right'\n\nexport type ScrollbarInstance = InstanceType<typeof Scrollbar> & unknown\n"],"mappings":";;;AAEY,MAACA,cAAc,GAAGC,UAAU,CAAC;EACvCC,QAAQ,EAAE;IACRC,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE;EACb,CAAG;EACDC,MAAM,EAAE;IACNH,IAAI,EAAE,CAACI,MAAM,EAAEH,MAAM,CAAC;IACtBC,OAAO,EAAE;EACb,CAAG;EACDG,SAAS,EAAE;IACTL,IAAI,EAAE,CAACI,MAAM,EAAEH,MAAM,CAAC;IACtBC,OAAO,EAAE;EACb,CAAG;EACDI,MAAM,EAAEC,OAAO;EACfC,SAAS,EAAE;IACTR,IAAI,EAAES,cAAc,CAAC,CAACL,MAAM,EAAEM,MAAM,EAAEC,KAAK,CAAC,CAAC;IAC7CT,OAAO,EAAE;EACb,CAAG;EACDU,SAAS,EAAE;IACTZ,IAAI,EAAE,CAACI,MAAM,EAAEO,KAAK,CAAC;IACrBT,OAAO,EAAE;EACb,CAAG;EACDW,SAAS,EAAE;IACTb,IAAI,EAAE,CAACI,MAAM,EAAEO,KAAK,CAAC;IACrBT,OAAO,EAAE;EACb,CAAG;EACDY,SAAS,EAAE;IACTd,IAAI,EAAE,CAACI,MAAM,EAAEO,KAAK,EAAED,MAAM,CAAC;IAC7BR,OAAO,EAAE;EACb,CAAG;EACDa,QAAQ,EAAER,OAAO;EACjBS,GAAG,EAAE;IACHhB,IAAI,EAAEI,MAAM;IACZF,OAAO,EAAE;EACb,CAAG;EACDe,MAAM,EAAEV,OAAO;EACfW,OAAO,EAAE;IACPlB,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE;EACb,CAAG;EACDiB,QAAQ,EAAE;IACRnB,IAAI,EAAE,CAACI,MAAM,EAAEH,MAAM,CAAC;IACtBC,OAAO,EAAE,KAAK;EAClB,CAAG;EACDkB,EAAE,EAAEhB,MAAM;EACViB,IAAI,EAAEjB,MAAM;EACZ,GAAGkB,YAAY,CAAC,CAAC,WAAW,EAAE,iBAAiB,CAAC;AAClD,CAAC;AACW,MAACC,cAAc,GAAG;EAC5B,aAAa,EAAGC,SAAS,IAAK,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC;EACpFE,MAAM,EAAEA,CAAC;IACPC,SAAS;IACTC;EACJ,CAAG,KAAK,CAACD,SAAS,EAAEC,UAAU,CAAC,CAACC,KAAK,CAACC,QAAQ;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}