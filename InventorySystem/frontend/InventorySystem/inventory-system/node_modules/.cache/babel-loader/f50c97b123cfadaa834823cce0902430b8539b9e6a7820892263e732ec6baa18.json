{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, inject, ref, watch, watchEffect, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, normalizeStyle } from 'vue';\nimport { colorPickerPanelContextKey } from '../color-picker-panel.mjs';\nimport Color from '../utils/color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    },\n    enableAlpha: {\n      type: Boolean,\n      required: true\n    },\n    disabled: Boolean\n  },\n  setup(props) {\n    const ns = useNamespace(\"color-predefine\");\n    const {\n      currentColor\n    } = inject(colorPickerPanelContextKey);\n    const rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(() => currentColor.value, val => {\n      const color = new Color({\n        value: val\n      });\n      rgbaColors.value.forEach(item => {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n    function handleSelect(index) {\n      if (props.disabled) return;\n      props.color.fromString(props.colors[index]);\n    }\n    function parseColors(colors, color) {\n      return colors.map(value => {\n        const c = new Color({\n          value\n        });\n        c.selected = c.compare(color);\n        return c;\n      });\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"colors\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      class: normalizeClass([_ctx.ns.e(\"color-selector\"), _ctx.ns.is(\"alpha\", item.get(\"alpha\") < 100), {\n        selected: item.selected\n      }]),\n      onClick: $event => _ctx.handleSelect(index)\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, [\"onClick\"]);\n  }), 128))], 2)], 2);\n}\nvar Predefine = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"predefine.vue\"]]);\nexport { Predefine as default };","map":{"version":3,"names":["_sfc_main","defineComponent","props","colors","type","Array","required","color","Object","enableAlpha","Boolean","disabled","setup","ns","useNamespace","currentColor","inject","colorPickerPanelContextKey","rgbaColors","ref","parseColors","watch","value","val","Color","forEach","item","selected","compare","watchEffect","handleSelect","index","fromString","map","c","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","createElementVNode","class","normalizeClass","e","openBlock","createElementBlock","Fragment","renderList","key","is","get","onClick","$event","style","normalizeStyle","backgroundColor","_export_sfc"],"sources":["../../../../../../../packages/components/color-picker-panel/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('colors')\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        :class=\"[\n          ns.e('color-selector'),\n          ns.is('alpha', item.get('alpha') < 100),\n          { selected: item.selected },\n        ]\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, watch, watchEffect } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { colorPickerPanelContextKey } from '../color-picker-panel'\nimport Color from '../utils/color'\n\nimport type { PropType, Ref } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: {\n      type: Array as PropType<string[]>,\n      required: true,\n    },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    enableAlpha: {\n      type: Boolean,\n      required: true,\n    },\n    disabled: Boolean,\n  },\n  setup(props) {\n    const ns = useNamespace('color-predefine')\n    const { currentColor } = inject(colorPickerPanelContextKey)!\n\n    const rgbaColors = ref(parseColors(props.colors, props.color)) as Ref<\n      Color[]\n    >\n\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color({\n          value: val,\n        })\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index: number) {\n      if (props.disabled) return\n      props.color.fromString(props.colors[index])\n    }\n\n    function parseColors(colors: string[], color: Color) {\n      return colors.map((value) => {\n        const c = new Color({\n          value,\n        })\n        c.selected = c.compare(color)\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;AA2BA,MAAKA,SAAA,GAAaC,eAAa;EAC7BC,KAAO;IACLC,MAAQ;MACNC,IAAM,EAAAC,KAAA;MACNC,QAAU;IAAA,CACZ;IACAC,KAAO;MACLH,IAAM,EAAAI,MAAA;MACNF,QAAU;IAAA,CACZ;IACAG,WAAa;MACXL,IAAM,EAAAM,OAAA;MACNJ,QAAU;IAAA,CACZ;IACAK,QAAU,EAAAD;EAAA,CACZ;EACAE,MAAMV,KAAO;IACL,MAAAW,EAAA,GAAKC,YAAA,CAAa,iBAAiB;IACzC,MAAM;MAAEC;IAAA,CAAiB,GAAAC,MAAA,CAAOC,0BAA0B;IAE1D,MAAMC,UAAA,GAAaC,GAAI,CAAAC,WAAA,CAAYlB,KAAA,CAAMC,MAAQ,EAAAD,KAAA,CAAMK,KAAK,CAAC;IAI7Dc,KAAA,OAAAN,YAAA,CAAAO,KAAA,EAAAC,GAAA;MACE,MAAMhB,KAAa,OAAAiB,KAAA;QACVF,KAAA,EAAAC;MACP,CAAM;MAAkBL,UACf,CAAAI,KAAA,CAAAG,OAAA,CAAAC,IAAA;QACTA,IAAC,CAAAC,QAAA,GAAApB,KAAA,CAAAqB,OAAA,CAAAF,IAAA;MAED,CAAW;IACT,CAAK;IAA6BG,WACnC;MACHX,UAAA,CAAAI,KAAA,GAAAF,WAAA,CAAAlB,KAAA,CAAAC,MAAA,EAAAD,KAAA,CAAAK,KAAA;IAAA,CACF;IAEA,SAAAuB,YAAkBA,CAAAC,KAAA;MAChB,IAAA7B,KAAA,CAAAS,QAAmB,EACpB;MAEDT,KAAA,CAAAK,KAAA,CAAAyB,UAAqC,CAAA9B,KAAA,CAAAC,MAAA,CAAA4B,KAAA;IACnC;IACA,SAAYX,YAAAjB,MAAiB,EAAAI,KAAA;MAC/B,OAAAJ,MAAA,CAAA8B,GAAA,CAAAX,KAAA;QAES,MAAAY,CAAA,OAAAV,KAAA;UACAF;QACL,CAAM;QACJY,CAAA,CAAAP,QAAA,GAAAO,CAAA,CAAAN,OAAA,CAAArB,KAAA;QACF,OAAC2B,CAAA;MACD,CAAE;IACF;IAAO,OACR;MACHhB,UAAA;MACOY,YAAA;MACLjB;IAAA,CACA;EAAA;AACA,CACF;AAEJ,SAACsB,YAAAC,IAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,QAAA;;;EAvFC,IAeMC,kBAAA;IAAAC,KAAA,EAAAC,cAAA,CAAAR,IAAA,CAAAvB,EAAA,CAAAgC,CAAA;EAAA,CAfA,IAAWC,SAAA,QAAAC,kBAAA,CAAAC,QAAA,QAAAC,UAAA,CAAAb,IAAA,CAAAlB,UAAA,GAAAQ,IAAA,EAAAK,KAAA;;MACfmB,GAAA,EAAAd,IAAA,CAAAjC,MAAA,CAAA4B,KAAA;MAaMY,KAAA,EAAAC,cAAA,EAAAR,IAAA,CAAAvB,EAAA,CAAAgC,CAAA,oBAbAT,IAAA,CAAKvB,EAAE,CAAAsC,EAAA,UAAAzB,IAAA,CAAA0B,GAAA,CAAG,OAAC;QAAAzB,QAAA,EAAAD,IAAA,CAAAC;MAAA,E;MACf0B,OAAA,EAAAC,MAAA,IAAAlB,IAAA,CAAAN,YAAA,CAAAC,KAAA;IAAA,CAWM,GAAAW,kBAAA;MAVoBa,KAAA,EAAAC,cAAA;QAAAC,eAAL,EAAA/B,IAAA,CAAAJ;MAAA;gBAClB;EAAiB,UACZ,KAAkB;AAAqD;+BAKvEoC,WAAA,CAAA1D,SAAA,GAAe,CAAK,UAAAmC,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}