{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { defineComponent, ref, onMounted, computed, provide, reactive, toRefs, watch, openBlock, createElementBlock, unref, normalizeClass, renderSlot, Fragment, renderList, createBlock, mergeProps, nextTick } from 'vue';\nimport { radioGroupProps, radioGroupEmits, radioDefaultProps } from './radio-group.mjs';\nimport { radioGroupKey } from './constants.mjs';\nimport { isEqual } from 'lodash-unified';\nimport Radio from './radio2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nconst __default__ = defineComponent({\n  name: \"ElRadioGroup\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"radio\");\n    const radioId = useId();\n    const radioGroupRef = ref();\n    const {\n      formItem\n    } = useFormItem();\n    const {\n      inputId: groupId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => emit(CHANGE_EVENT, value));\n    };\n    onMounted(() => {\n      const radios = radioGroupRef.value.querySelectorAll(\"[type=radio]\");\n      const firstLabel = radios[0];\n      if (!Array.from(radios).some(radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    });\n    const name = computed(() => {\n      return props.name || radioId.value;\n    });\n    const aliasProps = computed(() => ({\n      ...radioDefaultProps,\n      ...props.props\n    }));\n    const getOptionProps = option => {\n      const base = {\n        label: option[aliasProps.value.label],\n        value: option[aliasProps.value.value],\n        disabled: option[aliasProps.value.disabled]\n      };\n      return {\n        ...option,\n        ...base\n      };\n    };\n    provide(radioGroupKey, reactive({\n      ...toRefs(props),\n      changeEvent,\n      name\n    }));\n    watch(() => props.modelValue, (newVal, oldValue) => {\n      if (props.validateEvent && !isEqual(newVal, oldValue)) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn());\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        id: unref(groupId),\n        ref_key: \"radioGroupRef\",\n        ref: radioGroupRef,\n        class: normalizeClass(unref(ns).b(\"group\")),\n        role: \"radiogroup\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.ariaLabel || \"radio-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(formItem).labelId : void 0\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [(openBlock(true), createElementBlock(Fragment, null, renderList(props.options, (item, index) => {\n        return openBlock(), createBlock(Radio, mergeProps({\n          key: index\n        }, getOptionProps(item)), null, 16);\n      }), 128))])], 10, [\"id\", \"aria-label\", \"aria-labelledby\"]);\n    };\n  }\n});\nvar RadioGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"radio-group.vue\"]]);\nexport { RadioGroup as default };","map":{"version":3,"names":["name","ns","useNamespace","radioId","useId","radioGroupRef","ref","formItem","useFormItem","inputId","groupId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","changeEvent","value","emit","UPDATE_MODEL_EVENT","nextTick","CHANGE_EVENT","onMounted","radios","querySelectorAll","firstLabel","Array","from","some","radio","checked","tabIndex","computed","aliasProps","radioDefaultProps","getOptionProps","option","base","label","disabled","provide","radioGroupKey","reactive","toRefs","watch","modelValue","newVal","oldValue","validateEvent","isEqual","validate","catch","err","debugWarn","_ctx","_cache","openBlock","createElementBlock","id","unref","ref_key","class","normalizeClass","b"],"sources":["../../../../../../packages/components/radio/src/radio-group.vue"],"sourcesContent":["<template>\n  <div\n    :id=\"groupId\"\n    ref=\"radioGroupRef\"\n    :class=\"ns.b('group')\"\n    role=\"radiogroup\"\n    :aria-label=\"!isLabeledByFormItem ? ariaLabel || 'radio-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem!.labelId : undefined\"\n  >\n    <slot>\n      <el-radio\n        v-for=\"(item, index) in props.options\"\n        :key=\"index\"\n        v-bind=\"getOptionProps(item)\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useId, useNamespace } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport {\n  radioDefaultProps,\n  radioGroupEmits,\n  radioGroupProps,\n} from './radio-group'\nimport { radioGroupKey } from './constants'\nimport { isEqual } from 'lodash-unified'\nimport ElRadio from './radio.vue'\n\nimport type { RadioGroupProps } from './radio-group'\n\ndefineOptions({\n  name: 'ElRadioGroup',\n})\n\nconst props = defineProps(radioGroupProps)\nconst emit = defineEmits(radioGroupEmits)\n\nconst ns = useNamespace('radio')\nconst radioId = useId()\nconst radioGroupRef = ref<HTMLDivElement>()\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = (value: RadioGroupProps['modelValue']) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  nextTick(() => emit(CHANGE_EVENT, value))\n}\n\nonMounted(() => {\n  const radios =\n    radioGroupRef.value!.querySelectorAll<HTMLInputElement>('[type=radio]')\n  const firstLabel = radios[0]\n  if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {\n    firstLabel.tabIndex = 0\n  }\n})\n\nconst name = computed(() => {\n  return props.name || radioId.value\n})\n\nconst aliasProps = computed(() => ({\n  ...radioDefaultProps,\n  ...props.props,\n}))\nconst getOptionProps = (option: Record<string, any>) => {\n  const base = {\n    label: option[aliasProps.value.label],\n    value: option[aliasProps.value.value],\n    disabled: option[aliasProps.value.disabled],\n  }\n  return { ...option, ...base }\n}\n\nprovide(\n  radioGroupKey,\n  reactive({\n    ...toRefs(props),\n    changeEvent,\n    name,\n  })\n)\n\nwatch(\n  () => props.modelValue,\n  (newVal, oldValue) => {\n    if (props.validateEvent && !isEqual(newVal, oldValue)) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"],"mappings":";;;;;;;;;;;;;mCA6Cc;EACZA,IAAM;AACR;;;;;;;;;IAKM,MAAAC,EAAA,GAAKC,YAAA,CAAa,OAAO;IAC/B,MAAMC,OAAA,GAAUC,KAAM;IACtB,MAAMC,aAAA,GAAgBC,GAAoB;IACpC;MAAEC;IAAS,IAAIC,WAAY;IACjC,MAAM;MAAEC,OAAS,EAAAC,OAAA;MAASC;IAAoB,IAAIC,kBAAA,CAAmBC,KAAO;MAC1EC,eAAiB,EAAAP;IAAA,CAClB;IAEK,MAAAQ,WAAA,GAAeC,KAAyC;MAC5DC,IAAA,CAAKC,kBAAA,EAAoBF,KAAK;MAC9BG,QAAA,CAAS,MAAMF,IAAA,CAAKG,YAAc,EAAAJ,KAAK,CAAC;IAAA,CAC1C;IAEAK,SAAA,CAAU,MAAM;MACd,MAAMC,MACJ,GAAAjB,aAAA,CAAcW,KAAO,CAAAO,gBAAA,CAAmC,cAAc;MAClE,MAAAC,UAAA,GAAaF,MAAA,CAAO,CAAC;MACvB,KAACG,KAAM,CAAAC,IAAA,CAAKJ,MAAM,EAAEK,IAAK,CAACC,KAAU,IAAAA,KAAA,CAAMC,OAAO,KAAKL,UAAY;QACpEA,UAAA,CAAWM,QAAW;MAAA;IACxB,CACD;IAEK,MAAA9B,IAAA,GAAO+B,QAAA,CAAS,MAAM;MACnB,OAAAlB,KAAA,CAAMb,IAAA,IAAQG,OAAQ,CAAAa,KAAA;IAAA,CAC9B;IAEK,MAAAgB,UAAA,GAAaD,QAAA,CAAS,OAAO;MACjC,GAAGE,iBAAA;MACH,GAAGpB,KAAM,CAAAA;IAAA,CACT;IACI,MAAAqB,cAAA,GAAkBC,MAAgC;MACtD,MAAMC,IAAO;QACXC,KAAO,EAAAF,MAAA,CAAOH,UAAW,CAAAhB,KAAA,CAAMqB,KAAK;QACpCrB,KAAO,EAAAmB,MAAA,CAAOH,UAAW,CAAAhB,KAAA,CAAMA,KAAK;QACpCsB,QAAU,EAAAH,MAAA,CAAOH,UAAW,CAAAhB,KAAA,CAAMsB,QAAQ;MAAA,CAC5C;MACA,OAAO;QAAE,GAAGH,MAAQ;QAAA,GAAGC;MAAK;IAAA,CAC9B;IAEAG,OAAA,CAAAC,aAAA,EAAAC,QAAA;MACE,GAAAC,MAAA,CAAA7B,KAAA;MACAE,WAAS;MACPf;IAAe,CACf;IACA2C,KAAA,OAAA9B,KAAA,CAAA+B,UAAA,GAAAC,MAAA,EAAAC,QAAA;MACF,IAACjC,KAAA,CAAAkC,aAAA,KAAAC,OAAA,CAAAH,MAAA,EAAAC,QAAA;QACHvC,QAAA,oBAAAA,QAAA,CAAA0C,QAAA,WAAAC,KAAA,CAAAC,GAAA,IAAAC,SAAA;MAEA;IAAA,EACE;IACA,QAAAC,IAAsB,EAAAC,MAAA;MACpB,OAAAC,SAA2B,IAAAC,kBAAS,MAAQ;QAChCC,EAAA,EAAAC,KAAA,CAAAhD,OAAA;QACZiD,OAAA;QACFrD,GAAA,EAAAD,aAAA;QACFuD,KAAA,EAAAC,cAAA,CAAAH,KAAA,CAAAzD,EAAA,EAAA6D,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}