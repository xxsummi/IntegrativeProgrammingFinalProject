{"ast":null,"code":"import { disabledTimeListsProps } from '../../../time-picker/src/props/shared.mjs';\nimport { buildProps, definePropType } from '../../../../utils/vue/props/runtime.mjs';\nconst datePickerPanelProps = buildProps({\n  valueFormat: String,\n  dateFormat: String,\n  timeFormat: String,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType([Date, Array, String, Number]),\n    default: \"\"\n  },\n  defaultValue: {\n    type: definePropType([Date, Array])\n  },\n  defaultTime: {\n    type: definePropType([Date, Array])\n  },\n  isRange: Boolean,\n  ...disabledTimeListsProps,\n  disabledDate: {\n    type: Function\n  },\n  cellClassName: {\n    type: Function\n  },\n  shortcuts: {\n    type: Array,\n    default: () => []\n  },\n  arrowControl: Boolean,\n  unlinkPanels: Boolean,\n  showNow: {\n    type: Boolean,\n    default: true\n  },\n  showConfirm: Boolean,\n  showFooter: Boolean,\n  showWeekNumber: Boolean,\n  type: {\n    type: definePropType(String),\n    default: \"date\"\n  },\n  clearable: {\n    type: Boolean,\n    default: true\n  },\n  border: {\n    type: Boolean,\n    default: true\n  }\n});\nexport { datePickerPanelProps };","map":{"version":3,"names":["datePickerPanelProps","buildProps","valueFormat","String","dateFormat","timeFormat","disabled","Boolean","modelValue","type","definePropType","Date","Array","Number","default","defaultValue","defaultTime","isRange","disabledTimeListsProps","disabledDate","Function","cellClassName","shortcuts","arrowControl","unlinkPanels","showNow","showConfirm","showFooter","showWeekNumber","clearable","border"],"sources":["../../../../../../../packages/components/date-picker-panel/src/props/date-picker-panel.ts"],"sourcesContent":["import { buildProps, definePropType } from '@element-plus/utils'\nimport { disabledTimeListsProps } from '@element-plus/components/time-picker/src/props/shared'\n\nimport type { ExtractPropTypes, __ExtractPublicPropTypes } from 'vue'\nimport type {\n  ModelValueType,\n  SingleOrRange,\n} from '@element-plus/components/time-picker'\nimport type { DatePickerType } from '../types'\n\nexport const datePickerPanelProps = buildProps({\n  /**\n   * @description optional, format of binding value. If not specified, the binding value will be a Date object\n   */\n  valueFormat: String,\n  /**\n   * @description optional, format of the date displayed in input's inner panel\n   */\n  dateFormat: String,\n  /**\n   * @description optional, format of the time displayed in input's inner panel\n   */\n  timeFormat: String,\n  /**\n   * @description whether picker is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description binding value, if it is an array, the length should be 2\n   */\n  modelValue: {\n    type: definePropType<ModelValueType>([Date, Array, String, Number]),\n    default: '',\n  },\n  /**\n   * @description optional, default date of the calendar\n   */\n  defaultValue: {\n    type: definePropType<SingleOrRange<Date>>([Date, Array]),\n  },\n  /**\n   * @description optional, the time value to use when selecting date range\n   */\n  defaultTime: {\n    type: definePropType<SingleOrRange<Date>>([Date, Array]),\n  },\n  /**\n   * @description whether to pick a time range\n   */\n  isRange: Boolean,\n  ...disabledTimeListsProps,\n  /**\n   * @description a function determining if a date is disabled with that date as its parameter. Should return a Boolean\n   */\n  disabledDate: {\n    type: Function,\n  },\n  /**\n   * @description set custom className\n   */\n  cellClassName: {\n    type: Function,\n  },\n  /**\n   * @description an object array to set shortcut options\n   */\n  shortcuts: {\n    type: Array,\n    default: () => [],\n  },\n  /**\n   * @description whether to pick time using arrow buttons\n   */\n  arrowControl: Boolean,\n  /**\n   * @description unlink two date-panels in range-picker\n   */\n  unlinkPanels: Boolean,\n  /**\n   * @description whether to show the now button\n   */\n  showNow: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether to show the confirm button\n   */\n  showConfirm: Boolean,\n  /**\n   * @description whether to show footer\n   */\n  showFooter: Boolean,\n  /**\n   * @description whether to show the number of the calendar week\n   */\n  showWeekNumber: Boolean,\n  /**\n   * @description type of the picker\n   */\n  type: {\n    type: definePropType<DatePickerType>(String),\n    default: 'date',\n  },\n  /**\n   * @description whether to show clear button in range mode\n   */\n  clearable: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether the date picker is bordered\n   */\n  border: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\n\nexport type DatePickerPanelProps = ExtractPropTypes<typeof datePickerPanelProps>\nexport type DatePickerPanelPropsPublic = __ExtractPublicPropTypes<\n  typeof datePickerPanelProps\n>\n"],"mappings":";;AAEY,MAACA,oBAAoB,GAAGC,UAAU,CAAC;EAC7CC,WAAW,EAAEC,MAAM;EACnBC,UAAU,EAAED,MAAM;EAClBE,UAAU,EAAEF,MAAM;EAClBG,QAAQ,EAAEC,OAAO;EACjBC,UAAU,EAAE;IACVC,IAAI,EAAEC,cAAc,CAAC,CAACC,IAAI,EAAEC,KAAK,EAAET,MAAM,EAAEU,MAAM,CAAC,CAAC;IACnDC,OAAO,EAAE;EACb,CAAG;EACDC,YAAY,EAAE;IACZN,IAAI,EAAEC,cAAc,CAAC,CAACC,IAAI,EAAEC,KAAK,CAAC;EACtC,CAAG;EACDI,WAAW,EAAE;IACXP,IAAI,EAAEC,cAAc,CAAC,CAACC,IAAI,EAAEC,KAAK,CAAC;EACtC,CAAG;EACDK,OAAO,EAAEV,OAAO;EAChB,GAAGW,sBAAsB;EACzBC,YAAY,EAAE;IACZV,IAAI,EAAEW;EACV,CAAG;EACDC,aAAa,EAAE;IACbZ,IAAI,EAAEW;EACV,CAAG;EACDE,SAAS,EAAE;IACTb,IAAI,EAAEG,KAAK;IACXE,OAAO,EAAEA,CAAA,KAAM;EACnB,CAAG;EACDS,YAAY,EAAEhB,OAAO;EACrBiB,YAAY,EAAEjB,OAAO;EACrBkB,OAAO,EAAE;IACPhB,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDY,WAAW,EAAEnB,OAAO;EACpBoB,UAAU,EAAEpB,OAAO;EACnBqB,cAAc,EAAErB,OAAO;EACvBE,IAAI,EAAE;IACJA,IAAI,EAAEC,cAAc,CAACP,MAAM,CAAC;IAC5BW,OAAO,EAAE;EACb,CAAG;EACDe,SAAS,EAAE;IACTpB,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDgB,MAAM,EAAE;IACNrB,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}