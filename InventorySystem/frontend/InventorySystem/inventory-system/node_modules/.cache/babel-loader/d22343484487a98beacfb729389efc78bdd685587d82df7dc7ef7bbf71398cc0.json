{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, ref, computed, watch, nextTick, openBlock, createElementBlock, unref, normalizeClass, createElementVNode, Fragment, renderList, withKeys, withModifiers, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { basicYearTableProps } from '../props/basic-year-table.mjs';\nimport { getValidDateOfYear } from '../utils.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nimport { rangeArr } from '../../../time-picker/src/utils.mjs';\nimport { hasClass } from '../../../../utils/dom/style.mjs';\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-year-table\",\n  props: basicYearTableProps,\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const datesInYear = (year, lang2) => {\n      const firstDay = dayjs(String(year)).locale(lang2).startOf(\"year\");\n      const lastDay = firstDay.endOf(\"year\");\n      const numOfDays = lastDay.dayOfYear();\n      return rangeArr(numOfDays).map(n => firstDay.add(n, \"day\").toDate());\n    };\n    const ns = useNamespace(\"year-table\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const tbodyRef = ref();\n    const currentCellRef = ref();\n    const startYear = computed(() => {\n      return Math.floor(props.date.year() / 10) * 10;\n    });\n    const tableRows = ref([[], [], []]);\n    const lastRow = ref();\n    const lastColumn = ref();\n    const rows = computed(() => {\n      var _a, _b, _c;\n      const rows2 = tableRows.value;\n      const now = dayjs().locale(lang.value).startOf(\"year\");\n      for (let i = 0; i < 3; i++) {\n        const row = rows2[i];\n        for (let j = 0; j < 4; j++) {\n          if (i * 4 + j >= 10) {\n            break;\n          }\n          let cell = row[j];\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false,\n              text: -1,\n              disabled: false,\n              isSelected: false,\n              customClass: void 0,\n              date: void 0,\n              dayjs: void 0,\n              isCurrent: void 0,\n              selected: void 0,\n              renderText: void 0,\n              timestamp: void 0\n            };\n          }\n          cell.type = \"normal\";\n          const index = i * 4 + j + startYear.value;\n          const calTime = dayjs().year(index);\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;\n          cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, \"year\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"year\")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, \"year\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"year\"));\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = !!(calEndDate && calTime.isSame(calEndDate, \"year\"));\n            cell.end = !!(props.minDate && calTime.isSame(props.minDate, \"year\"));\n          } else {\n            cell.start = !!(props.minDate && calTime.isSame(props.minDate, \"year\"));\n            cell.end = !!(calEndDate && calTime.isSame(calEndDate, \"year\"));\n          }\n          const isToday = now.isSame(calTime);\n          if (isToday) {\n            cell.type = \"today\";\n          }\n          cell.text = index;\n          const cellDate = calTime.toDate();\n          cell.disabled = ((_b = props.disabledDate) == null ? void 0 : _b.call(props, cellDate)) || false;\n          cell.date = cellDate;\n          cell.customClass = (_c = props.cellClassName) == null ? void 0 : _c.call(props, cellDate);\n          cell.dayjs = calTime;\n          cell.timestamp = calTime.valueOf();\n          cell.isSelected = isSelectedCell(cell);\n          row[j] = cell;\n        }\n      }\n      return rows2;\n    });\n    const focus = () => {\n      var _a;\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n    const getCellKls = cell => {\n      const kls = {};\n      const today = dayjs().locale(lang.value);\n      const year = cell.text;\n      kls.disabled = props.disabled || (props.disabledDate ? datesInYear(year, lang.value).every(props.disabledDate) : false);\n      kls.today = today.year() === year;\n      kls.current = castArray(props.parsedValue).findIndex(d => d.year() === year) >= 0;\n      if (cell.customClass) {\n        kls[cell.customClass] = true;\n      }\n      if (cell.inRange) {\n        kls[\"in-range\"] = true;\n        if (cell.start) {\n          kls[\"start-date\"] = true;\n        }\n        if (cell.end) {\n          kls[\"end-date\"] = true;\n        }\n      }\n      return kls;\n    };\n    const isSelectedCell = cell => {\n      const year = cell.text;\n      return castArray(props.date).findIndex(date => date.year() === year) >= 0;\n    };\n    const handleYearTableClick = event => {\n      var _a;\n      if (props.disabled) return;\n      const target = (_a = event.target) == null ? void 0 : _a.closest(\"td\");\n      if (!target || !target.textContent || hasClass(target, \"disabled\")) return;\n      const column = target.cellIndex;\n      const row = target.parentNode.rowIndex;\n      const selectedYear = row * 4 + column + startYear.value;\n      const newDate = dayjs().year(selectedYear);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          emit(\"select\", true);\n        } else {\n          if (props.minDate && newDate >= props.minDate) {\n            emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n          emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"years\") {\n        if (event.type === \"keydown\") {\n          emit(\"pick\", castArray(props.parsedValue), false);\n          return;\n        }\n        const vaildYear = getValidDateOfYear(newDate.startOf(\"year\"), lang.value, props.disabledDate);\n        const newValue = hasClass(target, \"current\") ? castArray(props.parsedValue).filter(d => (d == null ? void 0 : d.year()) !== selectedYear) : castArray(props.parsedValue).concat([vaildYear]);\n        emit(\"pick\", newValue);\n      } else {\n        emit(\"pick\", selectedYear);\n      }\n    };\n    const handleMouseMove = event => {\n      var _a;\n      if (!props.rangeState.selecting) return;\n      const target = (_a = event.target) == null ? void 0 : _a.closest(\"td\");\n      if (!target) return;\n      const row = target.parentNode.rowIndex;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        emit(\"changerange\", {\n          selecting: true,\n          endDate: dayjs().year(startYear.value).add(row * 4 + column, \"year\")\n        });\n      }\n    };\n    watch(() => props.date, async () => {\n      var _a, _b;\n      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {\n        await nextTick();\n        (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n      }\n    });\n    expose({\n      focus\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"table\", {\n        role: \"grid\",\n        \"aria-label\": unref(t)(\"el.datepicker.yearTablePrompt\"),\n        class: normalizeClass(unref(ns).b()),\n        onClick: handleYearTableClick,\n        onMousemove: handleMouseMove\n      }, [createElementVNode(\"tbody\", {\n        ref_key: \"tbodyRef\",\n        ref: tbodyRef\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, rowKey) => {\n        return openBlock(), createElementBlock(\"tr\", {\n          key: rowKey\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, cellKey) => {\n          return openBlock(), createElementBlock(\"td\", {\n            key: `${rowKey}_${cellKey}`,\n            ref_for: true,\n            ref: el => cell.isSelected && (currentCellRef.value = el),\n            class: normalizeClass([\"available\", getCellKls(cell)]),\n            \"aria-selected\": cell.isSelected,\n            \"aria-label\": String(cell.text),\n            tabindex: cell.isSelected ? 0 : -1,\n            onKeydown: [withKeys(withModifiers(handleYearTableClick, [\"prevent\", \"stop\"]), [\"space\"]), withKeys(withModifiers(handleYearTableClick, [\"prevent\", \"stop\"]), [\"enter\"])]\n          }, [createVNode(unref(ElDatePickerCell), {\n            cell\n          }, null, 8, [\"cell\"])], 42, [\"aria-selected\", \"aria-label\", \"tabindex\", \"onKeydown\"]);\n        }), 128))]);\n      }), 128))], 512)], 42, [\"aria-label\"]);\n    };\n  }\n});\nvar YearTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"basic-year-table.vue\"]]);\nexport { YearTable as default };","map":{"version":3,"names":["datesInYear","year","lang2","firstDay","dayjs","String","locale","startOf","lastDay","endOf","numOfDays","dayOfYear","rangeArr","map","n","add","toDate","ns","useNamespace","t","lang","useLocale","tbodyRef","ref","currentCellRef","startYear","computed","Math","floor","props","date","tableRows","lastRow","lastColumn","rows","_a","_b","_c","rows2","value","now","i","row","j","cell","column","type","inRange","start","end","text","disabled","isSelected","customClass","isCurrent","selected","renderText","timestamp","index","calTime","calEndDate","rangeState","endDate","maxDate","selecting","minDate","isSameOrAfter","isSameOrBefore","isSame","isToday","cellDate","disabledDate","call","cellClassName","valueOf","isSelectedCell","focus","getCellKls","kls","today","every","current","castArray","parsedValue","findIndex","d","handleYearTableClick","event","target","closest","textContent","hasClass","cellIndex","parentNode","rowIndex","selectedYear","newDate","selectionMode","emit","vaildYear","getValidDateOfYear","newValue","filter","concat","handleMouseMove","watch","contains","document","activeElement","nextTick","expose","_ctx","_cache","openBlock","createElementBlock","role","unref"],"sources":["../../../../../../../packages/components/date-picker-panel/src/date-picker-com/basic-year-table.vue"],"sourcesContent":["<template>\n  <table\n    role=\"grid\"\n    :aria-label=\"t('el.datepicker.yearTablePrompt')\"\n    :class=\"ns.b()\"\n    @click=\"handleYearTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody ref=\"tbodyRef\">\n      <tr v-for=\"(row, rowKey) in rows\" :key=\"rowKey\">\n        <td\n          v-for=\"(cell, cellKey) in row\"\n          :key=\"`${rowKey}_${cellKey}`\"\n          :ref=\"(el) => cell.isSelected && (currentCellRef = el as HTMLElement)\"\n          class=\"available\"\n          :class=\"getCellKls(cell)\"\n          :aria-selected=\"cell.isSelected\"\n          :aria-label=\"String(cell.text)\"\n          :tabindex=\"cell.isSelected ? 0 : -1\"\n          @keydown.space.prevent.stop=\"handleYearTableClick\"\n          @keydown.enter.prevent.stop=\"handleYearTableClick\"\n        >\n          <el-date-picker-cell :cell=\"cell\" />\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, ref, watch } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\nimport { basicYearTableProps } from '../props/basic-year-table'\nimport { getValidDateOfYear } from '../utils'\nimport ElDatePickerCell from './basic-cell-render'\n\nimport type { Dayjs } from 'dayjs'\n\ntype YearCell = {\n  column: number\n  customClass: string | undefined\n  disabled: boolean\n  end: boolean\n  inRange: boolean\n  row: number\n  selected: Dayjs | undefined\n  isCurrent: boolean | undefined\n  isSelected: boolean\n  start: boolean\n  text: number\n  renderText: string | undefined\n  timestamp: number | undefined\n  type: 'normal' | 'today'\n  date: Date | undefined\n  dayjs: Dayjs | undefined\n}\n\nconst datesInYear = (year: number, lang: string) => {\n  const firstDay = dayjs(String(year)).locale(lang).startOf('year')\n  const lastDay = firstDay.endOf('year')\n  const numOfDays = lastDay.dayOfYear()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nconst props = defineProps(basicYearTableProps)\nconst emit = defineEmits(['changerange', 'pick', 'select'])\n\nconst ns = useNamespace('year-table')\n\nconst { t, lang } = useLocale()\nconst tbodyRef = ref<HTMLElement>()\nconst currentCellRef = ref<HTMLElement>()\nconst startYear = computed(() => {\n  return Math.floor(props.date.year() / 10) * 10\n})\n\nconst tableRows = ref<YearCell[][]>([[], [], []])\nconst lastRow = ref<number>()\nconst lastColumn = ref<number>()\nconst rows = computed(() => {\n  const rows = tableRows.value\n  const now = dayjs().locale(lang.value).startOf('year')\n\n  for (let i = 0; i < 3; i++) {\n    const row = rows[i]\n    for (let j = 0; j < 4; j++) {\n      if (i * 4 + j >= 10) {\n        break\n      }\n      let cell = row[j]\n      if (!cell) {\n        cell = {\n          row: i,\n          column: j,\n          type: 'normal',\n          inRange: false,\n          start: false,\n          end: false,\n          text: -1,\n          disabled: false,\n          isSelected: false,\n          customClass: undefined,\n          date: undefined,\n          dayjs: undefined,\n          isCurrent: undefined,\n          selected: undefined,\n          renderText: undefined,\n          timestamp: undefined,\n        }\n      }\n      cell.type = 'normal'\n      const index = i * 4 + j + startYear.value\n      const calTime = dayjs().year(index)\n\n      const calEndDate =\n        props.rangeState.endDate ||\n        props.maxDate ||\n        (props.rangeState.selecting && props.minDate) ||\n        null\n\n      cell.inRange =\n        !!(\n          props.minDate &&\n          calTime.isSameOrAfter(props.minDate, 'year') &&\n          calEndDate &&\n          calTime.isSameOrBefore(calEndDate, 'year')\n        ) ||\n        !!(\n          props.minDate &&\n          calTime.isSameOrBefore(props.minDate, 'year') &&\n          calEndDate &&\n          calTime.isSameOrAfter(calEndDate, 'year')\n        )\n\n      if (props.minDate?.isSameOrAfter(calEndDate)) {\n        cell.start = !!(calEndDate && calTime.isSame(calEndDate, 'year'))\n        cell.end = !!(props.minDate && calTime.isSame(props.minDate, 'year'))\n      } else {\n        cell.start = !!(props.minDate && calTime.isSame(props.minDate, 'year'))\n        cell.end = !!(calEndDate && calTime.isSame(calEndDate, 'year'))\n      }\n\n      const isToday = now.isSame(calTime)\n      if (isToday) {\n        cell.type = 'today'\n      }\n      cell.text = index\n      const cellDate = calTime.toDate()\n      cell.disabled = props.disabledDate?.(cellDate) || false\n      cell.date = cellDate\n      cell.customClass = props.cellClassName?.(cellDate)\n      cell.dayjs = calTime\n      cell.timestamp = calTime.valueOf()\n      cell.isSelected = isSelectedCell(cell)\n      row[j] = cell\n    }\n  }\n  return rows\n})\n\nconst focus = () => {\n  currentCellRef.value?.focus()\n}\n\nconst getCellKls = (cell: YearCell) => {\n  const kls: Record<string, boolean> = {}\n  const today = dayjs().locale(lang.value)\n  const year = cell.text\n\n  kls.disabled =\n    props.disabled ||\n    (props.disabledDate\n      ? datesInYear(year, lang.value).every(props.disabledDate)\n      : false)\n\n  kls.today = today.year() === year\n  kls.current =\n    castArray(props.parsedValue).findIndex((d) => d!.year() === year) >= 0\n\n  if (cell.customClass) {\n    kls[cell.customClass] = true\n  }\n  if (cell.inRange) {\n    kls['in-range'] = true\n\n    if (cell.start) {\n      kls['start-date'] = true\n    }\n\n    if (cell.end) {\n      kls['end-date'] = true\n    }\n  }\n  return kls\n}\n\nconst isSelectedCell = (cell: YearCell) => {\n  const year = cell.text\n  return castArray(props.date).findIndex((date) => date.year() === year) >= 0\n}\n\nconst handleYearTableClick = (event: MouseEvent | KeyboardEvent) => {\n  if (props.disabled) return\n  const target = (event.target as HTMLElement)?.closest(\n    'td'\n  ) as HTMLTableCellElement\n  if (!target || !target.textContent || hasClass(target, 'disabled')) return\n\n  const column = target.cellIndex\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex\n  const selectedYear = row * 4 + column + startYear.value\n  const newDate = dayjs().year(selectedYear)\n  if (props.selectionMode === 'range') {\n    if (!props.rangeState.selecting) {\n      emit('pick', { minDate: newDate, maxDate: null })\n      emit('select', true)\n    } else {\n      if (props.minDate && newDate >= props.minDate) {\n        emit('pick', { minDate: props.minDate, maxDate: newDate })\n      } else {\n        emit('pick', { minDate: newDate, maxDate: props.minDate })\n      }\n      emit('select', false)\n    }\n  } else if (props.selectionMode === 'years') {\n    if (event.type === 'keydown') {\n      emit('pick', castArray(props.parsedValue), false)\n      return\n    }\n    const vaildYear = getValidDateOfYear(\n      newDate.startOf('year'),\n      lang.value,\n      props.disabledDate\n    )\n    const newValue = hasClass(target, 'current')\n      ? castArray(props.parsedValue).filter((d) => d?.year() !== selectedYear)\n      : castArray(props.parsedValue).concat([vaildYear])\n    emit('pick', newValue)\n  } else {\n    emit('pick', selectedYear)\n  }\n}\n\nconst handleMouseMove = (event: MouseEvent) => {\n  if (!props.rangeState.selecting) return\n  const target = (event.target as HTMLElement)?.closest(\n    'td'\n  ) as HTMLTableCellElement\n  if (!target) return\n\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex\n  const column = (target as HTMLTableCellElement).cellIndex\n\n  // can not select disabled date\n  if (rows.value[row][column].disabled) return\n\n  // only update rangeState when mouse moves to a new cell\n  // this avoids frequent Date object creation and improves performance\n  if (row !== lastRow.value || column !== lastColumn.value) {\n    lastRow.value = row\n    lastColumn.value = column\n    emit('changerange', {\n      selecting: true,\n      endDate: dayjs()\n        .year(startYear.value)\n        .add(row * 4 + column, 'year'),\n    })\n  }\n}\n\nwatch(\n  () => props.date,\n  async () => {\n    if (tbodyRef.value?.contains(document.activeElement)) {\n      await nextTick()\n      currentCellRef.value?.focus()\n    }\n  }\n)\n\ndefineExpose({\n  /**\n   * @description focus on the current cell\n   */\n  focus,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}