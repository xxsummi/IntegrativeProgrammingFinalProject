{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { defineComponent, toRef, getCurrentInstance, watch, computed, provide, reactive, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, renderSlot, createVNode, createCommentVNode } from 'vue';\nimport { splitterProps } from './splitter.mjs';\nimport { splitterRootContextKey } from './type.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useContainer } from './hooks/useContainer.mjs';\nimport { useSize } from './hooks/useSize.mjs';\nimport { useResize } from './hooks/useResize.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useOrderedChildren } from '../../../hooks/use-ordered-children/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElSplitter\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: splitterProps,\n  emits: [\"resizeStart\", \"resize\", \"resizeEnd\", \"collapse\"],\n  setup(__props, {\n    emit: emits\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"splitter\");\n    const layout = toRef(props, \"layout\");\n    const lazy = toRef(props, \"lazy\");\n    const {\n      containerEl,\n      containerSize\n    } = useContainer(layout);\n    const {\n      removeChild: unregisterPanel,\n      children: panels,\n      addChild: registerPanel,\n      ChildrenSorter: PanelsSorter\n    } = useOrderedChildren(getCurrentInstance(), \"ElSplitterPanel\");\n    watch(panels, () => {\n      panels.value.forEach((instance, index) => {\n        instance.setIndex(index);\n      });\n    });\n    const {\n      percentSizes,\n      pxSizes\n    } = useSize(panels, containerSize);\n    const {\n      lazyOffset,\n      movingIndex,\n      onMoveStart,\n      onMoving,\n      onMoveEnd,\n      onCollapse\n    } = useResize(panels, containerSize, pxSizes, lazy);\n    const splitterStyles = computed(() => {\n      return {\n        [`--${ns.b()}-bar-offset`]: lazy.value ? `${lazyOffset.value}px` : void 0\n      };\n    });\n    const onResizeStart = index => {\n      onMoveStart(index);\n      emits(\"resizeStart\", index, pxSizes.value);\n    };\n    const onResize = (index, offset) => {\n      onMoving(index, offset);\n      if (!lazy.value) {\n        emits(\"resize\", index, pxSizes.value);\n      }\n    };\n    const onResizeEnd = index => {\n      onMoveEnd();\n      emits(\"resizeEnd\", index, pxSizes.value);\n    };\n    const onCollapsible = (index, type) => {\n      onCollapse(index, type);\n      emits(\"collapse\", index, type, pxSizes.value);\n    };\n    provide(splitterRootContextKey, reactive({\n      panels,\n      percentSizes,\n      pxSizes,\n      layout,\n      lazy,\n      movingIndex,\n      containerSize,\n      onMoveStart: onResizeStart,\n      onMoving: onResize,\n      onMoveEnd: onResizeEnd,\n      onCollapse: onCollapsible,\n      registerPanel,\n      unregisterPanel\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"containerEl\",\n        ref: containerEl,\n        class: normalizeClass([unref(ns).b(), unref(ns).e(unref(layout))]),\n        style: normalizeStyle(unref(splitterStyles))\n      }, [renderSlot(_ctx.$slots, \"default\"), createVNode(unref(PanelsSorter)), createCommentVNode(\" Prevent iframe touch events from breaking \"), unref(movingIndex) ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass([unref(ns).e(\"mask\"), unref(ns).e(`mask-${unref(layout)}`)])\n      }, null, 2)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n});\nvar Splitter = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"splitter.vue\"]]);\nexport { Splitter as default };","map":{"version":3,"names":["name","ns","useNamespace","layout","toRef","props","lazy","containerEl","containerSize","useContainer","removeChild","unregisterPanel","children","panels","addChild","registerPanel","ChildrenSorter","PanelsSorter","useOrderedChildren","getCurrentInstance","watch","value","forEach","instance","index","setIndex","percentSizes","pxSizes","useSize","lazyOffset","movingIndex","onMoveStart","onMoving","onMoveEnd","onCollapse","useResize","splitterStyles","computed","b","onResizeStart","emits","onResize","offset","onResizeEnd","onCollapsible","type","provide","splitterRootContextKey","reactive","_ctx","_cache","openBlock","createElementBlock","ref_key"],"sources":["../../../../../../packages/components/splitter/src/splitter.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n  computed,\n  getCurrentInstance,\n  provide,\n  reactive,\n  toRef,\n  watch,\n} from 'vue'\nimport { useNamespace, useOrderedChildren } from '@element-plus/hooks'\nimport { useContainer, useResize, useSize } from './hooks'\nimport { splitterProps } from './splitter'\nimport { type PanelItemState, splitterRootContextKey } from './type'\n\nconst ns = useNamespace('splitter')\n\ndefineOptions({\n  name: 'ElSplitter',\n})\n\nconst emits = defineEmits<{\n  (e: 'resizeStart', index: number, sizes: number[]): void\n  (e: 'resize', index: number, sizes: number[]): void\n  (e: 'resizeEnd', index: number, sizes: number[]): void\n  (e: 'collapse', index: number, type: 'start' | 'end', sizes: number[]): void\n}>()\n\nconst props = defineProps(splitterProps)\nconst layout = toRef(props, 'layout')\nconst lazy = toRef(props, 'lazy')\n\nconst { containerEl, containerSize } = useContainer(layout)\n\nconst {\n  removeChild: unregisterPanel,\n  children: panels,\n  addChild: registerPanel,\n  ChildrenSorter: PanelsSorter,\n} = useOrderedChildren<PanelItemState>(getCurrentInstance()!, 'ElSplitterPanel')\n\nwatch(panels, () => {\n  panels.value.forEach((instance: PanelItemState, index: number) => {\n    instance.setIndex(index)\n  })\n})\n\nconst { percentSizes, pxSizes } = useSize(panels, containerSize)\n\nconst {\n  lazyOffset,\n  movingIndex,\n  onMoveStart,\n  onMoving,\n  onMoveEnd,\n  onCollapse,\n} = useResize(panels, containerSize, pxSizes, lazy)\n\nconst splitterStyles = computed(() => {\n  return {\n    [`--${ns.b()}-bar-offset`]: lazy.value\n      ? `${lazyOffset.value}px`\n      : undefined,\n  }\n})\n\nconst onResizeStart = (index: number) => {\n  onMoveStart(index)\n  emits('resizeStart', index, pxSizes.value)\n}\n\nconst onResize = (index: number, offset: number) => {\n  onMoving(index, offset)\n\n  if (!lazy.value) {\n    emits('resize', index, pxSizes.value)\n  }\n}\n\nconst onResizeEnd = (index: number) => {\n  onMoveEnd()\n  emits('resizeEnd', index, pxSizes.value)\n}\n\nconst onCollapsible = (index: number, type: 'start' | 'end') => {\n  onCollapse(index, type)\n  emits('collapse', index, type, pxSizes.value)\n}\n\nprovide(\n  splitterRootContextKey,\n  reactive({\n    panels,\n    percentSizes,\n    pxSizes,\n    layout,\n    lazy,\n    movingIndex,\n    containerSize,\n    onMoveStart: onResizeStart,\n    onMoving: onResize,\n    onMoveEnd: onResizeEnd,\n    onCollapse: onCollapsible,\n    registerPanel,\n    unregisterPanel,\n  })\n)\n</script>\n\n<template>\n  <div\n    ref=\"containerEl\"\n    :class=\"[ns.b(), ns.e(layout)]\"\n    :style=\"splitterStyles\"\n  >\n    <slot />\n    <panels-sorter />\n    <!-- Prevent iframe touch events from breaking -->\n    <div v-if=\"movingIndex\" :class=\"[ns.e('mask'), ns.e(`mask-${layout}`)]\" />\n  </div>\n</template>\n"],"mappings":";;;;;;;;;;;mCAgBc;EACZA,IAAM;AACR;;;;;;;;;IAJM,MAAAC,EAAA,GAAKC,YAAA,CAAa,UAAU;IAc5B,MAAAC,MAAA,GAASC,KAAM,CAAAC,KAAA,EAAO,QAAQ;IAC9B,MAAAC,IAAA,GAAOF,KAAM,CAAAC,KAAA,EAAO,MAAM;IAEhC,MAAM;MAAEE,WAAA;MAAaC;IAAc,IAAIC,YAAA,CAAaN,MAAM;IAEpD;MACJO,WAAa,EAAAC,eAAA;MACbC,QAAU,EAAAC,MAAA;MACVC,QAAU,EAAAC,aAAA;MACVC,cAAgB,EAAAC;IAAA,CACd,GAAAC,kBAAA,CAAmCC,kBAAmB,IAAI,iBAAiB;IAE/EC,KAAA,CAAMP,MAAA,EAAQ,MAAM;MAClBA,MAAA,CAAOQ,KAAM,CAAAC,OAAA,CAAQ,CAACC,QAAA,EAA0BC,KAAkB;QAChED,QAAA,CAASE,QAAA,CAASD,KAAK;MAAA,CACxB;IAAA,CACF;IAED,MAAM;MAAEE,YAAc;MAAAC;IAAA,CAAY,GAAAC,OAAA,CAAQf,MAAA,EAAQL,aAAa;IAEzD;MACJqB,UAAA;MACAC,WAAA;MACAC,WAAA;MACAC,QAAA;MACAC,SAAA;MACAC;IAAA,CACE,GAAAC,SAAA,CAAUtB,MAAQ,EAAAL,aAAA,EAAemB,OAAA,EAASrB,IAAI;IAE5C,MAAA8B,cAAA,GAAiBC,QAAA,CAAS,MAAM;MAC7B;QACL,CAAC,KAAKpC,EAAG,CAAAqC,CAAA,EAAG,aAAa,GAAGhC,IAAA,CAAKe,KAC7B,MAAGQ,UAAW,CAAAR,KAAK,IACnB;MAAA,CACN;IAAA,CACD;IAEK,MAAAkB,aAAA,GAAiBf,KAAkB;MACvCO,WAAA,CAAYP,KAAK;MACXgB,KAAA,gBAAehB,KAAO,EAAAG,OAAA,CAAQN,KAAK;IAAA,CAC3C;IAEM,MAAAoB,QAAA,GAAWA,CAACjB,KAAA,EAAekB,MAAmB;MAClDV,QAAA,CAASR,KAAA,EAAOkB,MAAM;MAElB,KAACpC,IAAA,CAAKe,KAAO;QACTmB,KAAA,WAAUhB,KAAO,EAAAG,OAAA,CAAQN,KAAK;MAAA;IACtC,CACF;IAEM,MAAAsB,WAAA,GAAenB,KAAkB;MAC3BS,SAAA;MACJO,KAAA,cAAahB,KAAO,EAAAG,OAAA,CAAQN,KAAK;IAAA,CACzC;IAEM,MAAAuB,aAAA,GAAgBA,CAACpB,KAAA,EAAeqB,IAA0B;MAC9DX,UAAA,CAAWV,KAAA,EAAOqB,IAAI;MACtBL,KAAA,CAAM,UAAY,EAAAhB,KAAA,EAAOqB,IAAM,EAAAlB,OAAA,CAAQN,KAAK;IAAA,CAC9C;IAEAyB,OAAA,CAAAC,sBAAA,EAAAC,QAAA;MACEnC,MAAA;MACAa,YAAS;MACPC,OAAA;MACAxB,MAAA;MACAG,IAAA;MACAwB,WAAA;MACAtB,aAAA;MACAuB,WAAA,EAAAQ,aAAA;MACAP,QAAA,EAAAS,QAAA;MAAAR,SACa,EAAAU,WAAA;MAAAT,UACH,EAAAU,aAAA;MAAA7B,aACC;MAAAJ;IACC,CACZ;IACA,QAAAsC,IAAA,EAAAC,MAAA;MACF,OAACC,SAAA,IAAAC,kBAAA;QACHC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}