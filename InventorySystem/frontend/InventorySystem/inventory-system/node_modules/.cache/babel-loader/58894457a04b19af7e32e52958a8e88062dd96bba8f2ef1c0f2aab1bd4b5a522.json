{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport { defineComponent, ref, inject, computed, onBeforeUnmount, unref, watch, openBlock, createBlock, withCtx, Transition, withDirectives, createVNode, mergeProps, renderSlot, vShow, createCommentVNode } from 'vue';\nimport { computedEager, onClickOutside } from '@vueuse/core';\nimport '../../popper/index.mjs';\nimport { ElTeleport } from '../../teleport/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './constants.mjs';\nimport { useTooltipContentProps } from './content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { usePopperContainerId } from '../../../hooks/use-popper-container/index.mjs';\nimport { castArray } from '../../../utils/arrays.mjs';\nimport ElPopperContent from '../../popper/src/content2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { focusElement } from '../../../utils/dom/aria.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nconst __default__ = defineComponent({\n  name: \"ElTooltipContent\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: useTooltipContentProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const {\n      selector\n    } = usePopperContainerId();\n    const ns = useNamespace(\"tooltip\");\n    const contentRef = ref();\n    const popperContentRef = computedEager(() => {\n      var _a;\n      return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n    });\n    let stopHandle;\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const transitionClass = computed(() => {\n      return props.transition || `${ns.namespace.value}-fade-in-linear`;\n    });\n    const persistentRef = computed(() => {\n      return props.persistent;\n    });\n    onBeforeUnmount(() => {\n      stopHandle == null ? void 0 : stopHandle();\n    });\n    const shouldRender = computed(() => {\n      return unref(persistentRef) ? true : unref(open);\n    });\n    const shouldShow = computed(() => {\n      return props.disabled ? false : unref(open);\n    });\n    const appendTo = computed(() => {\n      return props.appendTo || selector.value;\n    });\n    const contentStyle = computed(() => {\n      var _a;\n      return (_a = props.style) != null ? _a : {};\n    });\n    const ariaHidden = ref(true);\n    const onTransitionLeave = () => {\n      onHide();\n      isFocusInsideContent() && focusElement(document.body, {\n        preventScroll: true\n      });\n      ariaHidden.value = true;\n    };\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true;\n    };\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && unref(trigger) === \"hover\") {\n        onOpen();\n      }\n    });\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === \"hover\") {\n        onClose();\n      }\n    });\n    const onBeforeEnter = () => {\n      var _a, _b;\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      onBeforeShow == null ? void 0 : onBeforeShow();\n    };\n    const onBeforeLeave = () => {\n      onBeforeHide == null ? void 0 : onBeforeHide();\n    };\n    const onAfterShow = () => {\n      onShow();\n    };\n    const onBlur = () => {\n      if (!props.virtualTriggering) {\n        onClose();\n      }\n    };\n    const isFocusInsideContent = event => {\n      var _a;\n      const popperContent = (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n      const activeElement = (event == null ? void 0 : event.relatedTarget) || document.activeElement;\n      return popperContent == null ? void 0 : popperContent.contains(activeElement);\n    };\n    watch(() => unref(open), val => {\n      if (!val) {\n        stopHandle == null ? void 0 : stopHandle();\n      } else {\n        ariaHidden.value = false;\n        stopHandle = onClickOutside(popperContentRef, () => {\n          if (unref(controlled)) return;\n          const needClose = castArray(unref(trigger)).every(item => {\n            return item !== \"hover\" && item !== \"focus\";\n          });\n          if (needClose) {\n            onClose();\n          }\n        });\n      }\n    }, {\n      flush: \"post\"\n    });\n    watch(() => props.content, () => {\n      var _a, _b;\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    expose({\n      contentRef,\n      isFocusInsideContent\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTeleport), {\n        disabled: !_ctx.teleported,\n        to: unref(appendTo)\n      }, {\n        default: withCtx(() => [unref(shouldRender) || !ariaHidden.value ? (openBlock(), createBlock(Transition, {\n          key: 0,\n          name: unref(transitionClass),\n          appear: !unref(persistentRef),\n          onAfterLeave: onTransitionLeave,\n          onBeforeEnter,\n          onAfterEnter: onAfterShow,\n          onBeforeLeave,\n          persisted: \"\"\n        }, {\n          default: withCtx(() => [withDirectives(createVNode(unref(ElPopperContent), mergeProps({\n            id: unref(id),\n            ref_key: \"contentRef\",\n            ref: contentRef\n          }, _ctx.$attrs, {\n            \"aria-label\": _ctx.ariaLabel,\n            \"aria-hidden\": ariaHidden.value,\n            \"boundaries-padding\": _ctx.boundariesPadding,\n            \"fallback-placements\": _ctx.fallbackPlacements,\n            \"gpu-acceleration\": _ctx.gpuAcceleration,\n            offset: _ctx.offset,\n            placement: _ctx.placement,\n            \"popper-options\": _ctx.popperOptions,\n            \"arrow-offset\": _ctx.arrowOffset,\n            strategy: _ctx.strategy,\n            effect: _ctx.effect,\n            enterable: _ctx.enterable,\n            pure: _ctx.pure,\n            \"popper-class\": _ctx.popperClass,\n            \"popper-style\": [_ctx.popperStyle, unref(contentStyle)],\n            \"reference-el\": _ctx.referenceEl,\n            \"trigger-target-el\": _ctx.triggerTargetEl,\n            visible: unref(shouldShow),\n            \"z-index\": _ctx.zIndex,\n            onMouseenter: unref(onContentEnter),\n            onMouseleave: unref(onContentLeave),\n            onBlur,\n            onClose: unref(onClose)\n          }), {\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n            _: 3\n          }, 16, [\"id\", \"aria-label\", \"aria-hidden\", \"boundaries-padding\", \"fallback-placements\", \"gpu-acceleration\", \"offset\", \"placement\", \"popper-options\", \"arrow-offset\", \"strategy\", \"effect\", \"enterable\", \"pure\", \"popper-class\", \"popper-style\", \"reference-el\", \"trigger-target-el\", \"visible\", \"z-index\", \"onMouseenter\", \"onMouseleave\", \"onClose\"]), [[vShow, unref(shouldShow)]])]),\n          _: 3\n        }, 8, [\"name\", \"appear\"])) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"disabled\", \"to\"]);\n    };\n  }\n});\nvar ElTooltipContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"content.vue\"]]);\nexport { ElTooltipContent as default };","map":{"version":3,"names":["name","inheritAttrs","selector","usePopperContainerId","ns","useNamespace","contentRef","ref","popperContentRef","computedEager","_a","value","stopHandle","controlled","id","open","trigger","onClose","onOpen","onShow","onHide","onBeforeShow","onBeforeHide","inject","TOOLTIP_INJECTION_KEY","transitionClass","computed","props","transition","namespace","persistentRef","persistent","onBeforeUnmount","shouldRender","unref","shouldShow","disabled","appendTo","contentStyle","style","ariaHidden","onTransitionLeave","isFocusInsideContent","focusElement","document","body","preventScroll","stopWhenControlled","onContentEnter","composeEventHandlers","enterable","onContentLeave","onBeforeEnter","_b","updatePopper","call","onBeforeLeave","onAfterShow","onBlur","virtualTriggering","event","popperContent","activeElement","relatedTarget","contains","watch","val","onClickOutside","needClose","castArray","every","item","flush","content","expose","_ctx","_cache","openBlock","createBlock","ElTeleport"],"sources":["../../../../../../packages/components/tooltip/src/content.vue"],"sourcesContent":["<template>\n  <el-teleport :disabled=\"!teleported\" :to=\"appendTo\">\n    <transition\n      v-if=\"shouldRender || !ariaHidden\"\n      :name=\"transitionClass\"\n      :appear=\"!persistentRef\"\n      @after-leave=\"onTransitionLeave\"\n      @before-enter=\"onBeforeEnter\"\n      @after-enter=\"onAfterShow\"\n      @before-leave=\"onBeforeLeave\"\n    >\n      <el-popper-content\n        v-show=\"shouldShow\"\n        :id=\"id\"\n        ref=\"contentRef\"\n        v-bind=\"$attrs\"\n        :aria-label=\"ariaLabel\"\n        :aria-hidden=\"ariaHidden\"\n        :boundaries-padding=\"boundariesPadding\"\n        :fallback-placements=\"fallbackPlacements\"\n        :gpu-acceleration=\"gpuAcceleration\"\n        :offset=\"offset\"\n        :placement=\"placement\"\n        :popper-options=\"popperOptions\"\n        :arrow-offset=\"arrowOffset\"\n        :strategy=\"strategy\"\n        :effect=\"effect\"\n        :enterable=\"enterable\"\n        :pure=\"pure\"\n        :popper-class=\"popperClass\"\n        :popper-style=\"[popperStyle!, contentStyle]\"\n        :reference-el=\"referenceEl\"\n        :trigger-target-el=\"triggerTargetEl\"\n        :visible=\"shouldShow\"\n        :z-index=\"zIndex\"\n        @mouseenter=\"onContentEnter\"\n        @mouseleave=\"onContentLeave\"\n        @blur=\"onBlur\"\n        @close=\"onClose\"\n      >\n        <slot />\n      </el-popper-content>\n    </transition>\n  </el-teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, onBeforeUnmount, ref, unref, watch } from 'vue'\nimport { computedEager, onClickOutside } from '@vueuse/core'\nimport { useNamespace, usePopperContainerId } from '@element-plus/hooks'\nimport {\n  castArray,\n  composeEventHandlers,\n  focusElement,\n} from '@element-plus/utils'\nimport { ElPopperContent } from '@element-plus/components/popper'\nimport ElTeleport from '@element-plus/components/teleport'\nimport { TOOLTIP_INJECTION_KEY } from './constants'\nimport { useTooltipContentProps } from './content'\n\nimport type { PopperContentInstance } from '@element-plus/components/popper'\n\ndefineOptions({\n  name: 'ElTooltipContent',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(useTooltipContentProps)\n\nconst { selector } = usePopperContainerId()\nconst ns = useNamespace('tooltip')\n\nconst contentRef = ref<PopperContentInstance>()\nconst popperContentRef = computedEager(() => contentRef.value?.popperContentRef)\nlet stopHandle: ReturnType<typeof onClickOutside>\nconst {\n  controlled,\n  id,\n  open,\n  trigger,\n  onClose,\n  onOpen,\n  onShow,\n  onHide,\n  onBeforeShow,\n  onBeforeHide,\n} = inject(TOOLTIP_INJECTION_KEY, undefined)!\nconst transitionClass = computed(() => {\n  return props.transition || `${ns.namespace.value}-fade-in-linear`\n})\nconst persistentRef = computed(() => {\n  // For testing, we would always want the content to be rendered\n  // to the DOM, so we need to return true here.\n  if (process.env.NODE_ENV === 'test') {\n    if (!process.env.RUN_TEST_WITH_PERSISTENT) {\n      return true\n    }\n  }\n  return props.persistent\n})\n\nonBeforeUnmount(() => {\n  stopHandle?.()\n})\n\nconst shouldRender = computed(() => {\n  return unref(persistentRef) ? true : unref(open)\n})\n\nconst shouldShow = computed(() => {\n  return props.disabled ? false : unref(open)\n})\n\nconst appendTo = computed(() => {\n  return props.appendTo || selector.value\n})\n\nconst contentStyle = computed(() => props.style ?? {})\n\nconst ariaHidden = ref(true)\n\nconst onTransitionLeave = () => {\n  onHide()\n  isFocusInsideContent() && focusElement(document.body, { preventScroll: true })\n  ariaHidden.value = true\n}\n\nconst stopWhenControlled = () => {\n  if (unref(controlled)) return true\n}\n\nconst onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n  if (props.enterable && unref(trigger) === 'hover') {\n    onOpen()\n  }\n})\n\nconst onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n  if (unref(trigger) === 'hover') {\n    onClose()\n  }\n})\n\nconst onBeforeEnter = () => {\n  contentRef.value?.updatePopper?.()\n  onBeforeShow?.()\n}\n\nconst onBeforeLeave = () => {\n  onBeforeHide?.()\n}\n\nconst onAfterShow = () => {\n  onShow()\n}\n\nconst onBlur = () => {\n  if (!props.virtualTriggering) {\n    onClose()\n  }\n}\n\nconst isFocusInsideContent = (event?: FocusEvent) => {\n  const popperContent: HTMLElement | undefined =\n    contentRef.value?.popperContentRef\n  const activeElement = (event?.relatedTarget as Node) || document.activeElement\n\n  return popperContent?.contains(activeElement)\n}\n\nwatch(\n  () => unref(open),\n  (val) => {\n    if (!val) {\n      stopHandle?.()\n    } else {\n      ariaHidden.value = false\n      stopHandle = onClickOutside(popperContentRef, () => {\n        if (unref(controlled)) return\n        const needClose = castArray(unref(trigger)).every((item) => {\n          return item !== 'hover' && item !== 'focus'\n        })\n        if (needClose) {\n          onClose()\n        }\n      })\n    }\n  },\n  {\n    flush: 'post',\n  }\n)\n\nwatch(\n  () => props.content,\n  () => {\n    contentRef.value?.updatePopper?.()\n  }\n)\n\ndefineExpose({\n  /**\n   * @description el-popper-content component instance\n   */\n  contentRef,\n  /**\n   * @description validate current focus event is trigger inside el-popper-content\n   */\n  isFocusInsideContent,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}