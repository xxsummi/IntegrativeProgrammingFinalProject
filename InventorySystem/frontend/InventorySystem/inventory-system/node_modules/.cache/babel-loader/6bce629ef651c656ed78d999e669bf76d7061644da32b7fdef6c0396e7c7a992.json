{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, shallowRef, computed, watch } from 'vue';\nimport { TreeOptionsEnum, NODE_CLICK, NODE_DROP, CURRENT_CHANGE, NODE_EXPAND, NODE_COLLAPSE } from '../virtual-tree.mjs';\nimport { useCheck } from './useCheck.mjs';\nimport { useFilter } from './useFilter.mjs';\nimport { isObject } from '@vue/shared';\nfunction useTree(props, emit) {\n  const expandedKeySet = ref(/* @__PURE__ */new Set());\n  const currentKey = ref();\n  const tree = shallowRef();\n  const listRef = ref();\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  } = useCheck(props, tree);\n  const {\n    doFilter,\n    hiddenNodeKeySet,\n    isForceHiddenExpandIcon\n  } = useFilter(props, tree);\n  const valueKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;\n  });\n  const childrenKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;\n  });\n  const disabledKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;\n  });\n  const labelKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;\n  });\n  const flattenTree = computed(() => {\n    var _a;\n    const expandedKeys = expandedKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const flattenNodes = [];\n    const nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    const stack = [];\n    for (let i = nodes.length - 1; i >= 0; --i) {\n      stack.push(nodes[i]);\n    }\n    while (stack.length) {\n      const node = stack.pop();\n      if (hiddenKeys.has(node.key)) continue;\n      flattenNodes.push(node);\n      if (node.children && expandedKeys.has(node.key)) {\n        for (let i = node.children.length - 1; i >= 0; --i) {\n          stack.push(node.children[i]);\n        }\n      }\n    }\n    return flattenNodes;\n  });\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0;\n  });\n  function createTree(data) {\n    const treeNodeMap = /* @__PURE__ */new Map();\n    const levelTreeNodeMap = /* @__PURE__ */new Map();\n    let maxLevel = 1;\n    function traverse(nodes, level = 1, parent = void 0) {\n      var _a;\n      const siblings = [];\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode);\n        const node = {\n          level,\n          key: value,\n          data: rawNode\n        };\n        node.label = getLabel(rawNode);\n        node.parent = parent;\n        const children = getChildren(rawNode);\n        node.disabled = getDisabled(rawNode);\n        node.isLeaf = !children || children.length === 0;\n        node.expanded = expandedKeySet.value.has(value);\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node);\n        }\n        siblings.push(node);\n        treeNodeMap.set(value, node);\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, []);\n        }\n        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n      }\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n      return siblings;\n    }\n    const treeNodes = traverse(data);\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes\n    };\n  }\n  function filter(query) {\n    const keys = doFilter(query);\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n    return node[valueKey.value];\n  }\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n  function toggleExpand(node) {\n    const expandedKeys = expandedKeySet.value;\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node);\n    } else {\n      expandNode(node);\n    }\n  }\n  function setExpandedKeys(keys) {\n    const expandedKeys = /* @__PURE__ */new Set();\n    const nodeMap = tree.value.treeNodeMap;\n    expandedKeySet.value.forEach(key => {\n      const node = nodeMap.get(key);\n      expandedKeySet.value.delete(node.key);\n      node.expanded = false;\n    });\n    keys.forEach(k => {\n      let node = nodeMap.get(k);\n      while (node && !expandedKeys.has(node.key)) {\n        expandedKeys.add(node.key);\n        node.expanded = true;\n        node = node.parent;\n      }\n    });\n    expandedKeySet.value = expandedKeys;\n  }\n  function handleNodeClick(node, e) {\n    emit(NODE_CLICK, node.data, node, e);\n    handleCurrentChange(node);\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n    if (props.showCheckbox && (props.checkOnClickNode || node.isLeaf && props.checkOnClickLeaf) && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n  function handleNodeDrop(node, e) {\n    emit(NODE_DROP, node.data, node, e);\n  }\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(CURRENT_CHANGE, node.data, node);\n    }\n  }\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n  function expandNode(node) {\n    const keySet = expandedKeySet.value;\n    if (tree.value && props.accordion) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      keySet.forEach(key => {\n        const treeNode = treeNodeMap.get(key);\n        if (node && node.level === (treeNode == null ? void 0 : treeNode.level)) {\n          keySet.delete(key);\n          treeNode.expanded = false;\n        }\n      });\n    }\n    keySet.add(node.key);\n    node.expanded = true;\n    emit(NODE_EXPAND, node.data, node);\n  }\n  function collapseNode(node) {\n    expandedKeySet.value.delete(node.key);\n    node.expanded = false;\n    emit(NODE_COLLAPSE, node.data, node);\n  }\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n  function isCurrent(node) {\n    const current = currentKey.value;\n    return current !== void 0 && current === node.key;\n  }\n  function getCurrentNode() {\n    var _a, _b;\n    if (!currentKey.value) return void 0;\n    return (_b = (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n  function setData(data) {\n    tree.value = createTree(data);\n  }\n  function getNode(data) {\n    var _a;\n    const key = isObject(data) ? getKey(data) : data;\n    return (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(key);\n  }\n  function scrollToNode(key, strategy = \"auto\") {\n    const node = getNode(key);\n    if (node && listRef.value) {\n      listRef.value.scrollToItem(flattenTree.value.indexOf(node), strategy);\n    }\n  }\n  function scrollTo(offset) {\n    var _a;\n    (_a = listRef.value) == null ? void 0 : _a.scrollTo(offset);\n  }\n  watch(() => props.currentNodeKey, key => {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  watch(() => props.defaultExpandedKeys, key => {\n    expandedKeySet.value = new Set(key);\n  }, {\n    immediate: true\n  });\n  watch(() => props.data, data => {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    listRef,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeDrop,\n    handleNodeCheck,\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n    getNode,\n    expandNode,\n    collapseNode,\n    setExpandedKeys,\n    scrollToNode,\n    scrollTo\n  };\n}\nexport { useTree };","map":{"version":3,"names":["useTree","props","emit","expandedKeySet","ref","Set","currentKey","tree","shallowRef","listRef","isIndeterminate","isChecked","toggleCheckbox","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","useCheck","doFilter","hiddenNodeKeySet","isForceHiddenExpandIcon","useFilter","valueKey","computed","_a","value","TreeOptionsEnum","KEY","childrenKey","children","CHILDREN","disabledKey","disabled","DISABLED","labelKey","label","LABEL","flattenTree","expandedKeys","hiddenKeys","flattenNodes","nodes","treeNodes","stack","i","length","push","node","pop","has","key","isNotEmpty","createTree","data","treeNodeMap","Map","levelTreeNodeMap","maxLevel","traverse","level","parent","siblings","rawNode","getKey","getLabel","getChildren","getDisabled","isLeaf","expanded","set","get","filter","query","keys","toggleExpand","collapseNode","expandNode","setExpandedKeys","nodeMap","forEach","delete","k","add","handleNodeClick","e","NODE_CLICK","handleCurrentChange","expandOnClickNode","showCheckbox","checkOnClickNode","checkOnClickLeaf","handleNodeDrop","NODE_DROP","isCurrent","CURRENT_CHANGE","handleNodeCheck","checked","keySet","accordion","treeNode","NODE_EXPAND","NODE_COLLAPSE","isDisabled","current","getCurrentNode","_b","getCurrentKey","setCurrentKey","setData","getNode","isObject","scrollToNode","strategy","scrollToItem","indexOf","scrollTo","offset","watch","currentNodeKey","immediate","defaultExpandedKeys"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useTree.ts"],"sourcesContent":["import { computed, ref, shallowRef, watch } from 'vue'\nimport { isObject } from '@element-plus/utils'\nimport {\n  CURRENT_CHANGE,\n  NODE_CLICK,\n  NODE_COLLAPSE,\n  NODE_DROP,\n  NODE_EXPAND,\n  TreeOptionsEnum,\n} from '../virtual-tree'\nimport { useCheck } from './useCheck'\nimport { useFilter } from './useFilter'\n\nimport type {\n  FixedSizeList,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { SetupContext } from 'vue'\nimport type { treeEmits } from '../virtual-tree'\nimport type { CheckboxValueType } from '@element-plus/components/checkbox'\nimport type {\n  Tree,\n  TreeData,\n  TreeKey,\n  TreeNode,\n  TreeNodeData,\n  TreeProps,\n} from '../types'\n\nexport function useTree(\n  props: TreeProps,\n  emit: SetupContext<typeof treeEmits>['emit']\n) {\n  const expandedKeySet = ref<Set<TreeKey>>(new Set())\n  const currentKey = ref<TreeKey | undefined>()\n  const tree = shallowRef<Tree | undefined>()\n  const listRef = ref<typeof FixedSizeList | undefined>()\n\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n  } = useCheck(props, tree)\n\n  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(\n    props,\n    tree\n  )\n\n  const valueKey = computed(() => {\n    return props.props?.value || TreeOptionsEnum.KEY\n  })\n  const childrenKey = computed(() => {\n    return props.props?.children || TreeOptionsEnum.CHILDREN\n  })\n  const disabledKey = computed(() => {\n    return props.props?.disabled || TreeOptionsEnum.DISABLED\n  })\n  const labelKey = computed(() => {\n    return props.props?.label || TreeOptionsEnum.LABEL\n  })\n\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value\n    const hiddenKeys = hiddenNodeKeySet.value\n    const flattenNodes: TreeNode[] = []\n    const nodes = tree.value?.treeNodes || []\n\n    const stack: TreeNode[] = []\n    for (let i = nodes.length - 1; i >= 0; --i) {\n      stack.push(nodes[i])\n    }\n    while (stack.length) {\n      const node = stack.pop()!\n      if (hiddenKeys.has(node.key)) continue\n\n      flattenNodes.push(node)\n      if (node.children && expandedKeys.has(node.key)) {\n        for (let i = node.children.length - 1; i >= 0; --i) {\n          stack.push(node.children[i])\n        }\n      }\n    }\n\n    return flattenNodes\n  })\n\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0\n  })\n\n  function createTree(data: TreeData): Tree {\n    const treeNodeMap: Map<TreeKey, TreeNode> = new Map()\n    const levelTreeNodeMap: Map<number, TreeNode[]> = new Map()\n    let maxLevel = 1\n    function traverse(\n      nodes: TreeData,\n      level = 1,\n      parent: TreeNode | undefined = undefined\n    ) {\n      const siblings: TreeNode[] = []\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode)\n        const node: TreeNode = {\n          level,\n          key: value,\n          data: rawNode,\n        }\n        node.label = getLabel(rawNode)\n        node.parent = parent\n        const children = getChildren(rawNode)\n        node.disabled = getDisabled(rawNode)\n        node.isLeaf = !children || children.length === 0\n        node.expanded = expandedKeySet.value.has(value)\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node)\n        }\n        siblings.push(node)\n        treeNodeMap.set(value, node)\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, [])\n        }\n        levelTreeNodeMap.get(level)?.push(node)\n      }\n      if (level > maxLevel) {\n        maxLevel = level\n      }\n      return siblings\n    }\n    const treeNodes: TreeNode[] = traverse(data)\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes,\n    }\n  }\n\n  function filter(query: string) {\n    const keys = doFilter(query)\n    if (keys) {\n      expandedKeySet.value = keys\n    }\n  }\n\n  function getChildren(node: TreeNodeData): TreeNodeData[] {\n    return node[childrenKey.value]\n  }\n\n  function getKey(node: TreeNodeData): TreeKey {\n    if (!node) {\n      return ''\n    }\n    return node[valueKey.value]\n  }\n\n  function getDisabled(node: TreeNodeData): boolean {\n    return node[disabledKey.value]\n  }\n\n  function getLabel(node: TreeNodeData): string {\n    return node[labelKey.value]\n  }\n\n  function toggleExpand(node: TreeNode) {\n    const expandedKeys = expandedKeySet.value\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node)\n    } else {\n      expandNode(node)\n    }\n  }\n\n  function setExpandedKeys(keys: TreeKey[]) {\n    const expandedKeys = new Set<TreeKey>()\n    const nodeMap = tree.value!.treeNodeMap\n\n    expandedKeySet.value.forEach((key) => {\n      const node = nodeMap.get(key)!\n      expandedKeySet.value.delete(node.key)\n      node.expanded = false\n    })\n\n    keys.forEach((k) => {\n      let node = nodeMap.get(k)\n      while (node && !expandedKeys.has(node.key)) {\n        expandedKeys.add(node.key)\n        node.expanded = true\n        node = node.parent\n      }\n    })\n\n    expandedKeySet.value = expandedKeys\n  }\n\n  function handleNodeClick(node: TreeNode, e: MouseEvent) {\n    emit(NODE_CLICK, node.data, node, e)\n    handleCurrentChange(node)\n    if (props.expandOnClickNode) {\n      toggleExpand(node)\n    }\n    if (\n      props.showCheckbox &&\n      (props.checkOnClickNode || (node.isLeaf && props.checkOnClickLeaf)) &&\n      !node.disabled\n    ) {\n      toggleCheckbox(node, !isChecked(node), true)\n    }\n  }\n\n  function handleNodeDrop(node: TreeNode, e: DragEvent) {\n    emit(NODE_DROP, node.data, node, e)\n  }\n\n  function handleCurrentChange(node: TreeNode) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key\n      emit(CURRENT_CHANGE, node.data, node)\n    }\n  }\n\n  function handleNodeCheck(node: TreeNode, checked: CheckboxValueType) {\n    toggleCheckbox(node, checked)\n  }\n\n  function expandNode(node: TreeNode) {\n    const keySet = expandedKeySet.value\n    if (tree.value && props.accordion) {\n      // whether only one node among the same level can be expanded at one time\n      const { treeNodeMap } = tree.value\n      keySet.forEach((key) => {\n        const treeNode = treeNodeMap.get(key)\n        if (node && node.level === treeNode?.level) {\n          keySet.delete(key)\n          treeNode.expanded = false\n        }\n      })\n    }\n    keySet.add(node.key)\n    node.expanded = true\n    emit(NODE_EXPAND, node.data, node)\n  }\n\n  function collapseNode(node: TreeNode) {\n    expandedKeySet.value.delete(node.key)\n    node.expanded = false\n    emit(NODE_COLLAPSE, node.data, node)\n  }\n\n  function isDisabled(node: TreeNode): boolean {\n    return !!node.disabled\n  }\n\n  function isCurrent(node: TreeNode): boolean {\n    const current = currentKey.value\n    return current !== undefined && current === node.key\n  }\n\n  function getCurrentNode(): TreeNodeData | undefined {\n    if (!currentKey.value) return undefined\n    return tree.value?.treeNodeMap.get(currentKey.value)?.data\n  }\n\n  function getCurrentKey(): TreeKey | undefined {\n    return currentKey.value\n  }\n\n  function setCurrentKey(key: TreeKey): void {\n    currentKey.value = key\n  }\n\n  function setData(data: TreeData) {\n    tree.value = createTree(data)\n  }\n\n  function getNode(data: TreeKey | TreeNodeData) {\n    const key = isObject(data) ? getKey(data) : data\n    return tree.value?.treeNodeMap.get(key)\n  }\n\n  function scrollToNode(key: TreeKey, strategy: ScrollStrategy = 'auto') {\n    const node = getNode(key)\n    if (node && listRef.value) {\n      listRef.value.scrollToItem(flattenTree.value.indexOf(node), strategy)\n    }\n  }\n\n  function scrollTo(offset: number) {\n    listRef.value?.scrollTo(offset)\n  }\n\n  watch(\n    () => props.currentNodeKey,\n    (key) => {\n      currentKey.value = key\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.defaultExpandedKeys,\n    (key) => {\n      expandedKeySet.value = new Set<TreeKey>(key)\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.data,\n    (data: TreeData) => {\n      setData(data)\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    listRef,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeDrop,\n    handleNodeCheck,\n    // expose\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n    getNode,\n    expandNode,\n    collapseNode,\n    setExpandedKeys,\n    scrollToNode,\n    scrollTo,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}