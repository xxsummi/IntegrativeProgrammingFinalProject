{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { inject, provide } from 'vue';\nimport { TREE_NODE_MAP_INJECTION_KEY } from '../tokens.mjs';\nfunction useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject(TREE_NODE_MAP_INJECTION_KEY, null);\n  const currentNodeMap = {\n    treeNodeExpand: node => {\n      var _a;\n      if (props.node !== node) {\n        (_a = props.node) == null ? void 0 : _a.collapse();\n      }\n    },\n    children: []\n  };\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap);\n  }\n  provide(TREE_NODE_MAP_INJECTION_KEY, currentNodeMap);\n  return {\n    broadcastExpanded: node => {\n      if (!props.accordion) return;\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node);\n      }\n    }\n  };\n}\nexport { useNodeExpandEventBroadcast };","map":{"version":3,"names":["useNodeExpandEventBroadcast","props","parentNodeMap","inject","TREE_NODE_MAP_INJECTION_KEY","currentNodeMap","treeNodeExpand","node","_a","collapse","children","push","provide","broadcastExpanded","accordion","childNode"],"sources":["../../../../../../../packages/components/tree/src/model/useNodeExpandEventBroadcast.ts"],"sourcesContent":["import { inject, provide } from 'vue'\nimport { TREE_NODE_MAP_INJECTION_KEY } from '../tokens'\n\nimport type Node from '../model/node'\n\ninterface NodeMap {\n  treeNodeExpand(node?: Node): void\n  children: NodeMap[]\n}\n\ninterface Props {\n  node?: Node\n  accordion: boolean\n}\n\nexport function useNodeExpandEventBroadcast(props: Props) {\n  const parentNodeMap = inject(\n    TREE_NODE_MAP_INJECTION_KEY,\n    null\n  ) as NodeMap | null\n  const currentNodeMap: NodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node?.collapse()\n      }\n    },\n    children: [],\n  }\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap)\n  }\n\n  provide(TREE_NODE_MAP_INJECTION_KEY, currentNodeMap)\n\n  return {\n    broadcastExpanded: (node?: Node): void => {\n      if (!props.accordion) return\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node)\n      }\n    },\n  }\n}\n"],"mappings":";;;AAEO,SAASA,2BAA2BA,CAACC,KAAK,EAAE;EACjD,MAAMC,aAAa,GAAGC,MAAM,CAACC,2BAA2B,EAAE,IAAI,CAAC;EAC/D,MAAMC,cAAc,GAAG;IACrBC,cAAc,EAAGC,IAAI,IAAK;MACxB,IAAIC,EAAE;MACN,IAAIP,KAAK,CAACM,IAAI,KAAKA,IAAI,EAAE;QACvB,CAACC,EAAE,GAAGP,KAAK,CAACM,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGC,EAAE,CAACC,QAAQ,EAAE;MAC1D;IACA,CAAK;IACDC,QAAQ,EAAE;EACd,CAAG;EACD,IAAIR,aAAa,EAAE;IACjBA,aAAa,CAACQ,QAAQ,CAACC,IAAI,CAACN,cAAc,CAAC;EAC/C;EACEO,OAAO,CAACR,2BAA2B,EAAEC,cAAc,CAAC;EACpD,OAAO;IACLQ,iBAAiB,EAAGN,IAAI,IAAK;MAC3B,IAAI,CAACN,KAAK,CAACa,SAAS,EAClB;MACF,KAAK,MAAMC,SAAS,IAAIV,cAAc,CAACK,QAAQ,EAAE;QAC/CK,SAAS,CAACT,cAAc,CAACC,IAAI,CAAC;MACtC;IACA;EACA,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}