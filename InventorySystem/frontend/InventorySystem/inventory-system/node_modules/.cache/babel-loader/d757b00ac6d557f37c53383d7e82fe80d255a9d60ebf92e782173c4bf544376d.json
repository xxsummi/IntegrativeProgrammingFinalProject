{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, useAttrs, ref, computed, watch, nextTick, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, createSlots, withModifiers, resolveDynamicComponent, renderSlot, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, vShow } from 'vue';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { useCssVar, useResizeObserver, isClient } from '@vueuse/core';\nimport { ElCascaderPanel } from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormDisabled, useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isPromise } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nconst COMPONENT_NAME = \"ElCascader\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: ({\n          state\n        }) => {\n          const {\n            modifiersData,\n            placement\n          } = state;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          if (modifiersData.arrow) {\n            modifiersData.arrow.x = 35;\n          }\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    const attrs = useAttrs();\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const {\n      formItem\n    } = useFormItem();\n    const isDisabled = useFormDisabled();\n    const {\n      valueOnClear\n    } = useEmptyValues(props);\n    const {\n      isComposing,\n      handleComposition\n    } = useComposition({\n      afterComposition(event) {\n        var _a;\n        const text = (_a = event.target) == null ? void 0 : _a.value;\n        handleInput(text);\n      }\n    });\n    const tooltipRef = ref(null);\n    const tagTooltipRef = ref();\n    const inputRef = ref();\n    const tagWrapper = ref(null);\n    const cascaderPanelRef = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const cascaderStyle = computed(() => {\n      return attrs.style;\n    });\n    const inputPlaceholder = computed(() => {\n      var _a;\n      return (_a = props.placeholder) != null ? _a : t(\"el.cascader.placeholder\");\n    });\n    const currentPlaceholder = computed(() => searchInputValue.value || presentTags.value.length > 0 || isComposing.value ? \"\" : inputPlaceholder.value);\n    const realSize = useFormSize();\n    const tagSize = computed(() => realSize.value === \"small\" ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const {\n      wrapperRef,\n      isFocused,\n      handleBlur\n    } = useFocusController(inputRef, {\n      disabled: isDisabled,\n      beforeBlur(event) {\n        var _a, _b, _c;\n        return ((_a = tooltipRef.value) == null ? void 0 : _a.isFocusInsideContent(event)) || ((_c = (_b = tagTooltipRef.value) == null ? void 0 : _b[0]) == null ? void 0 : _c.isFocusInsideContent(event));\n      },\n      afterBlur() {\n        var _a;\n        popperVisible.value = false;\n        if (props.validateEvent) {\n          (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn());\n        }\n      }\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value && !isFocused.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const checkedValue = computed({\n      get() {\n        return cloneDeep(props.modelValue);\n      },\n      set(val) {\n        const value = val != null ? val : valueOnClear.value;\n        emit(UPDATE_MODEL_EVENT, value);\n        emit(CHANGE_EVENT, value);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn());\n        }\n      }\n    });\n    const cascaderKls = computed(() => {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs.class];\n    });\n    const cascaderIconKls = computed(() => {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    const inputClass = computed(() => nsCascader.is(\"focus\", isFocused.value));\n    const contentRef = computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const handleClickOutside = event => {\n      if (isFocused.value) {\n        const _event = new FocusEvent(\"blur\", event);\n        handleBlur(_event);\n      }\n      togglePopperVisible(false);\n    };\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = inputRef.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    const deleteTag = tag => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    const getStrategyCheckedNodes = () => {\n      switch (props.showCheckedStrategy) {\n        case \"child\":\n          return checkedNodes.value;\n        case \"parent\":\n          {\n            const clickedNodes = getCheckedNodes(false);\n            const clickedNodesValue = clickedNodes.map(o => o.value);\n            const parentNodes = clickedNodes.filter(o => !o.parent || !clickedNodesValue.includes(o.parent.value));\n            return parentNodes;\n          }\n        default:\n          return [];\n      }\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = getStrategyCheckedNodes();\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        nodes.slice(0, props.maxCollapseTags).forEach(node => tags.push(genTag(node)));\n        const rest = nodes.slice(props.maxCollapseTags);\n        const restCount = rest.length;\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = inputRef.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight, inputInitialHeight) - 2}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    const handleKeyDown = e => {\n      if (isComposing.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n      emit(\"clear\");\n    };\n    const syncPresentTextValue = () => {\n      const {\n        value\n      } = presentText;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    const handleSuggestionClick = node => {\n      var _a, _b;\n      const {\n        checked\n      } = node;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          target.click();\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    const getInputInnerHeight = inputInner => Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled, () => props.collapseTags], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(realSize, async () => {\n      await nextTick();\n      const inputInner = inputRef.value.input;\n      inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight;\n      updateStyle();\n    });\n    watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    onMounted(() => {\n      const inputInner = inputRef.value.input;\n      const inputInnerHeight = getInputInnerHeight(inputInner);\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes,\n      cascaderPanelRef,\n      togglePopperVisible,\n      contentRef,\n      presentText\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-style\": _ctx.popperStyle,\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": _ctx.fallbackPlacements,\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: _ctx.placement,\n        transition: `${unref(nsCascader).namespace.value}-zoom-in-top`,\n        effect: _ctx.effect,\n        pure: \"\",\n        persistent: _ctx.persistent,\n        onHide: hideSuggestionPanel\n      }, {\n        default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n          ref_key: \"wrapperRef\",\n          ref: wrapperRef,\n          class: normalizeClass(unref(cascaderKls)),\n          style: normalizeStyle(unref(cascaderStyle)),\n          onClick: () => togglePopperVisible(unref(readonly) ? void 0 : true),\n          onKeydown: handleKeyDown,\n          onMouseenter: $event => inputHover.value = true,\n          onMouseleave: $event => inputHover.value = false\n        }, [createVNode(unref(ElInput), {\n          ref_key: \"inputRef\",\n          ref: inputRef,\n          modelValue: inputValue.value,\n          \"onUpdate:modelValue\": $event => inputValue.value = $event,\n          placeholder: unref(currentPlaceholder),\n          readonly: unref(readonly),\n          disabled: unref(isDisabled),\n          \"validate-event\": false,\n          size: unref(realSize),\n          class: normalizeClass(unref(inputClass)),\n          tabindex: unref(multiple) && _ctx.filterable && !unref(isDisabled) ? -1 : void 0,\n          onCompositionstart: unref(handleComposition),\n          onCompositionupdate: unref(handleComposition),\n          onCompositionend: unref(handleComposition),\n          onInput: handleInput\n        }, createSlots({\n          suffix: withCtx(() => [unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n            key: \"clear\",\n            class: normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n            onClick: withModifiers(handleClear, [\"stop\"])\n          }, {\n            default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n            key: \"arrow-down\",\n            class: normalizeClass(unref(cascaderIconKls)),\n            onClick: withModifiers($event => togglePopperVisible(), [\"stop\"])\n          }, {\n            default: withCtx(() => [createVNode(unref(ArrowDown))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"]))]),\n          _: 2\n        }, [_ctx.$slots.prefix ? {\n          name: \"prefix\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"prefix\")])\n        } : void 0]), 1032, [\"modelValue\", \"onUpdate:modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"]), unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          ref_key: \"tagWrapper\",\n          ref: tagWrapper,\n          class: normalizeClass([unref(nsCascader).e(\"tags\"), unref(nsCascader).is(\"validate\", Boolean(unref(validateState)))])\n        }, [renderSlot(_ctx.$slots, \"tag\", {\n          data: allPresentTags.value,\n          deleteTag\n        }, () => [(openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, tag => {\n          return openBlock(), createBlock(unref(ElTag), {\n            key: tag.key,\n            type: _ctx.tagType,\n            size: unref(tagSize),\n            effect: _ctx.tagEffect,\n            hit: tag.hitState,\n            closable: tag.closable,\n            \"disable-transitions\": \"\",\n            onClose: $event => deleteTag(tag)\n          }, {\n            default: withCtx(() => [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", {\n              key: 0\n            }, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n              key: 1,\n              ref_for: true,\n              ref_key: \"tagTooltipRef\",\n              ref: tagTooltipRef,\n              disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n              \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n              placement: \"bottom\",\n              \"popper-class\": _ctx.popperClass,\n              \"popper-style\": _ctx.popperStyle,\n              effect: _ctx.effect\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n              content: withCtx(() => [createVNode(unref(ElScrollbar), {\n                \"max-height\": _ctx.maxCollapseTagsTooltipHeight\n              }, {\n                default: withCtx(() => [createElementVNode(\"div\", {\n                  class: normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n                }, [(openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(_ctx.maxCollapseTags), (tag2, idx) => {\n                  return openBlock(), createElementBlock(\"div\", {\n                    key: idx,\n                    class: normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                  }, [(openBlock(), createBlock(unref(ElTag), {\n                    key: tag2.key,\n                    class: \"in-tooltip\",\n                    type: _ctx.tagType,\n                    size: unref(tagSize),\n                    effect: _ctx.tagEffect,\n                    hit: tag2.hitState,\n                    closable: tag2.closable,\n                    \"disable-transitions\": \"\",\n                    onClose: $event => deleteTag(tag2)\n                  }, {\n                    default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)]),\n                    _: 2\n                  }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]))], 2);\n                }), 128))], 2)]),\n                _: 1\n              }, 8, [\"max-height\"])]),\n              _: 2\n            }, 1032, [\"disabled\", \"popper-class\", \"popper-style\", \"effect\"]))]),\n            _: 2\n          }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]);\n        }), 128))]), _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n          key: 0,\n          \"onUpdate:modelValue\": $event => searchInputValue.value = $event,\n          type: \"text\",\n          class: normalizeClass(unref(nsCascader).e(\"search-input\")),\n          placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n          onInput: e => handleInput(searchInputValue.value, e),\n          onClick: withModifiers($event => togglePopperVisible(true), [\"stop\"]),\n          onKeydown: withKeys(handleDelete, [\"delete\"]),\n          onCompositionstart: unref(handleComposition),\n          onCompositionupdate: unref(handleComposition),\n          onCompositionend: unref(handleComposition)\n        }, null, 42, [\"onUpdate:modelValue\", \"placeholder\", \"onInput\", \"onClick\", \"onKeydown\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"])), [[vModelText, searchInputValue.value]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 46, [\"onClick\", \"onMouseenter\", \"onMouseleave\"])), [[unref(ClickOutside), handleClickOutside, unref(contentRef)]])]),\n        content: withCtx(() => [_ctx.$slots.header ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(unref(nsCascader).e(\"header\")),\n          onClick: withModifiers(() => {}, [\"stop\"])\n        }, [renderSlot(_ctx.$slots, \"header\")], 10, [\"onClick\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(unref(ElCascaderPanel), {\n          ref_key: \"cascaderPanelRef\",\n          ref: cascaderPanelRef,\n          modelValue: unref(checkedValue),\n          \"onUpdate:modelValue\": $event => isRef(checkedValue) ? checkedValue.value = $event : null,\n          options: _ctx.options,\n          props: props.props,\n          border: false,\n          \"render-label\": _ctx.$slots.default,\n          onExpandChange: handleExpandChange,\n          onClose: $event => _ctx.$nextTick(() => togglePopperVisible(false))\n        }, {\n          empty: withCtx(() => [renderSlot(_ctx.$slots, \"empty\")]),\n          _: 3\n        }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"options\", \"props\", \"render-label\", \"onClose\"]), [[vShow, !filtering.value]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n          key: 1,\n          ref_key: \"suggestionPanel\",\n          ref: suggestionPanel,\n          tag: \"ul\",\n          class: normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n          \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n          onKeydown: handleSuggestionKeyDown\n        }, {\n          default: withCtx(() => [suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, {\n            key: 0\n          }, renderList(suggestions.value, item => {\n            return openBlock(), createElementBlock(\"li\", {\n              key: item.uid,\n              class: normalizeClass([unref(nsCascader).e(\"suggestion-item\"), unref(nsCascader).is(\"checked\", item.checked)]),\n              tabindex: -1,\n              onClick: $event => handleSuggestionClick(item)\n            }, [renderSlot(_ctx.$slots, \"suggestion-item\", {\n              item\n            }, () => [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(unref(ElIcon), {\n              key: 0\n            }, {\n              default: withCtx(() => [createVNode(unref(Check))]),\n              _: 1\n            })) : createCommentVNode(\"v-if\", true)])], 10, [\"onClick\"]);\n          }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n            key: 1\n          }, () => [createElementVNode(\"li\", {\n            class: normalizeClass(unref(nsCascader).e(\"empty-text\"))\n          }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)])]),\n          _: 3\n        }, 8, [\"class\", \"view-class\"])), [[vShow, filtering.value]]) : createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", {\n          key: 2,\n          class: normalizeClass(unref(nsCascader).e(\"footer\")),\n          onClick: withModifiers(() => {}, [\"stop\"])\n        }, [renderSlot(_ctx.$slots, \"footer\")], 10, [\"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"popper-style\", \"fallback-placements\", \"placement\", \"transition\", \"effect\", \"persistent\"]);\n    };\n  }\n});\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"cascader.vue\"]]);\nexport { Cascader as default };","map":{"version":3,"names":["name","COMPONENT_NAME","popperOptions","modifiers","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","attrs","useAttrs","inputInitialHeight","pressDeleteCount","nsCascader","useNamespace","nsInput","t","useLocale","formItem","useFormItem","isDisabled","useFormDisabled","valueOnClear","useEmptyValues","props","isComposing","handleComposition","useComposition","afterComposition","event","_a","text","target","value","handleInput","tooltipRef","ref","tagTooltipRef","inputRef","tagWrapper","cascaderPanelRef","suggestionPanel","popperVisible","inputHover","filtering","inputValue","searchInputValue","presentTags","allPresentTags","suggestions","cascaderStyle","computed","style","inputPlaceholder","placeholder","currentPlaceholder","length","realSize","useFormSize","tagSize","multiple","readonly","filterable","searchKeyword","checkedNodes","wrapperRef","isFocused","handleBlur","useFocusController","disabled","beforeBlur","_b","_c","isFocusInsideContent","afterBlur","validateEvent","validate","call","catch","err","debugWarn","clearBtnVisible","clearable","presentText","showAllLevels","separator","nodes","calcText","validateState","checkedValue","get","cloneDeep","modelValue","set","val","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","cascaderKls","b","m","is","class","cascaderIconKls","e","inputClass","contentRef","popperRef","handleClickOutside","_event","FocusEvent","togglePopperVisible","visible","input","setAttribute","updatePopperPosition","nextTick","scrollToExpandingNode","syncPresentTextValue","updatePopper","hideSuggestionPanel","genTag","node","key","uid","hitState","closable","isCollapseTag","deleteTag","tag","doCheck","calculateCheckedValue","valueByOption","getStrategyCheckedNodes","showCheckedStrategy","clickedNodes","getCheckedNodes","clickedNodesValue","map","o","parentNodes","filter","parent","calculatePresentTags","tags","allTags","forEach","push","slice","maxCollapseTags","rest","restCount","collapseTags","calculateSuggestions","filterMethod","res","getFlattedNodes","checkStrictly","focusFirstNode","firstNode","$el","querySelector","focus","click","updateStyle","inputInner","tagWrapperEl","suggestionPanelEl","isClient","suggestionList","minWidth","offsetWidth","offsetHeight","height","Math","max","leafOnly","handleExpandChange","handleKeyDown","code","EVENT_CODE","enter","numpadEnter","down","preventDefault","esc","stopPropagation","tab","handleClear","clearCheckedNodes","handleSuggestionClick","checked","handleCheckChange","handleSuggestionKeyDown","up","distance","focusNode","getSibling","handleDelete","lastTag","handleFilter","debounce","passed","beforeFilter","isPromise","then","getInputInnerHeight","Number","parseFloat","useCssVar","cssVarName","watch","immediate","onMounted","inputInnerHeight","useResizeObserver","expose","_ctx","_cache","openBlock","createBlock","unref","ElTooltip","ref_key","teleported","popperClass","popperStyle","fallbackPlacements","transition","namespace","effect","pure","persistent"],"sources":["../../../../../../packages/components/cascader/src/cascader.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass!]\"\n    :popper-style=\"popperStyle\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"fallbackPlacements\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    :placement=\"placement\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    :effect=\"effect\"\n    pure\n    :persistent=\"persistent\"\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        ref=\"wrapperRef\"\n        v-clickoutside:[contentRef]=\"handleClickOutside\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"inputRef\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"inputClass\"\n          :tabindex=\"multiple && filterable && !isDisabled ? -1 : undefined\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @input=\"handleInput\"\n        >\n          <template v-if=\"$slots.prefix\" #prefix>\n            <slot name=\"prefix\" />\n          </template>\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <component :is=\"clearIcon\" />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div\n          v-if=\"multiple\"\n          ref=\"tagWrapper\"\n          :class=\"[\n            nsCascader.e('tags'),\n            nsCascader.is('validate', Boolean(validateState)),\n          ]\"\n        >\n          <slot name=\"tag\" :data=\"allPresentTags\" :delete-tag=\"deleteTag\">\n            <el-tag\n              v-for=\"tag in presentTags\"\n              :key=\"tag.key\"\n              :type=\"tagType\"\n              :size=\"tagSize\"\n              :effect=\"tagEffect\"\n              :hit=\"tag.hitState\"\n              :closable=\"tag.closable\"\n              disable-transitions\n              @close=\"deleteTag(tag)\"\n            >\n              <template v-if=\"tag.isCollapseTag === false\">\n                <span>{{ tag.text }}</span>\n              </template>\n              <template v-else>\n                <el-tooltip\n                  ref=\"tagTooltipRef\"\n                  :disabled=\"popperVisible || !collapseTagsTooltip\"\n                  :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                  placement=\"bottom\"\n                  :popper-class=\"popperClass\"\n                  :popper-style=\"popperStyle\"\n                  :effect=\"effect\"\n                >\n                  <template #default>\n                    <span>{{ tag.text }}</span>\n                  </template>\n                  <template #content>\n                    <el-scrollbar :max-height=\"maxCollapseTagsTooltipHeight\">\n                      <div :class=\"nsCascader.e('collapse-tags')\">\n                        <div\n                          v-for=\"(tag2, idx) in allPresentTags.slice(\n                            maxCollapseTags\n                          )\"\n                          :key=\"idx\"\n                          :class=\"nsCascader.e('collapse-tag')\"\n                        >\n                          <el-tag\n                            :key=\"tag2.key\"\n                            class=\"in-tooltip\"\n                            :type=\"tagType\"\n                            :size=\"tagSize\"\n                            :effect=\"tagEffect\"\n                            :hit=\"tag2.hitState\"\n                            :closable=\"tag2.closable\"\n                            disable-transitions\n                            @close=\"deleteTag(tag2)\"\n                          >\n                            <span>{{ tag2.text }}</span>\n                          </el-tag>\n                        </div>\n                      </div>\n                    </el-scrollbar>\n                  </template>\n                </el-tooltip>\n              </template>\n            </el-tag>\n          </slot>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <div v-if=\"$slots.header\" :class=\"nsCascader.e('header')\" @click.stop>\n        <slot name=\"header\" />\n      </div>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"cascaderPanelRef\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      >\n        <template #empty>\n          <slot name=\"empty\" />\n        </template>\n      </el-cascader-panel>\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <slot name=\"suggestion-item\" :item=\"item\">\n              <span>{{ item.text }}</span>\n              <el-icon v-if=\"item.checked\">\n                <check />\n              </el-icon>\n            </slot>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n      <div v-if=\"$slots.footer\" :class=\"nsCascader.e('footer')\" @click.stop>\n        <slot name=\"footer\" />\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { useCssVar, useResizeObserver } from '@vueuse/core'\nimport {\n  debugWarn,\n  focusNode,\n  getSibling,\n  isClient,\n  isPromise,\n} from '@element-plus/utils'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormSize,\n} from '@element-plus/components/form'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport {\n  useComposition,\n  useEmptyValues,\n  useFocusController,\n  useLocale,\n  useNamespace,\n} from '@element-plus/hooks'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type {\n  CascaderNode,\n  CascaderPanelInstance,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        if (modifiersData.arrow) {\n          modifiersData.arrow.x = 35\n        }\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { formItem } = useFormItem()\nconst isDisabled = useFormDisabled()\nconst { valueOnClear } = useEmptyValues(props)\nconst { isComposing, handleComposition } = useComposition({\n  afterComposition(event) {\n    const text = (event.target as HTMLInputElement)?.value\n    handleInput(text)\n  },\n})\n\nconst tooltipRef: Ref<TooltipInstance | null> = ref(null)\n//TODO: transform [TooltipInstance] to TooltipInstance\nconst tagTooltipRef = ref<[TooltipInstance]>()\nconst inputRef = ref<InputInstance>()\nconst tagWrapper = ref(null)\nconst cascaderPanelRef: Ref<CascaderPanelInstance | null> = ref(null)\nconst suggestionPanel: Ref<ScrollbarInstance | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst inputPlaceholder = computed(\n  () => props.placeholder ?? t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value || presentTags.value.length > 0 || isComposing.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useFormSize()\nconst tagSize = computed(() =>\n  realSize.value === 'small' ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => cascaderPanelRef.value?.checkedNodes || []\n)\n\nconst { wrapperRef, isFocused, handleBlur } = useFocusController(inputRef, {\n  disabled: isDisabled,\n  beforeBlur(event) {\n    return (\n      tooltipRef.value?.isFocusInsideContent(event) ||\n      tagTooltipRef.value?.[0]?.isFocusInsideContent(event)\n    )\n  },\n  afterBlur() {\n    popperVisible.value = false\n    if (props.validateEvent) {\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    (!inputHover.value && !isFocused.value)\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst validateState = computed(() => formItem?.validateState || '')\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    // https://github.com/element-plus/element-plus/issues/17647\n    const value = val ?? valueOnClear.value\n    emit(UPDATE_MODEL_EVENT, value)\n    emit(CHANGE_EVENT, value)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst inputClass = computed(() => nsCascader.is('focus', isFocused.value))\n\nconst contentRef = computed(() => {\n  return tooltipRef.value?.popperRef?.contentRef\n})\n\nconst handleClickOutside = (event: Event) => {\n  if (isFocused.value) {\n    const _event = new FocusEvent('blur', event)\n    handleBlur(_event)\n  }\n  togglePopperVisible(false)\n}\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    inputRef.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(cascaderPanelRef.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  cascaderPanelRef.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst getStrategyCheckedNodes = (): CascaderNode[] => {\n  switch (props.showCheckedStrategy) {\n    case 'child':\n      return checkedNodes.value\n    case 'parent': {\n      const clickedNodes = getCheckedNodes(false)\n      const clickedNodesValue = clickedNodes!.map((o) => o.value)\n      const parentNodes = clickedNodes!.filter(\n        (o) => !o.parent || !clickedNodesValue.includes(o.parent.value)\n      )\n      return parentNodes\n    }\n    default:\n      return []\n  }\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = getStrategyCheckedNodes()\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    nodes\n      .slice(0, props.maxCollapseTags)\n      .forEach((node) => tags.push(genTag(node)))\n    const rest = nodes.slice(props.maxCollapseTags)\n    const restCount = rest.length\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = cascaderPanelRef.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = cascaderPanelRef.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = inputRef.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    // 2 is el-input__wrapper padding\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight, inputInitialHeight) - 2}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return cascaderPanelRef.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isComposing.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  cascaderPanelRef.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n  emit('clear')\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    cascaderPanelRef.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && cascaderPanelRef.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      e.preventDefault()\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nconst getInputInnerHeight = (inputInner: HTMLElement): number =>\n  Number.parseFloat(\n    useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n  ) - 2\n\nwatch(filtering, updatePopperPosition)\n\nwatch(\n  [checkedNodes, isDisabled, () => props.collapseTags],\n  calculatePresentTags\n)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(realSize, async () => {\n  await nextTick()\n  const inputInner = inputRef.value!.input!\n  inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight\n  updateStyle()\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = inputRef.value!.input!\n\n  const inputInnerHeight = getInputInnerHeight(inputInner)\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n  /**\n   * @description toggle the visible of popper\n   */\n  togglePopperVisible,\n  /**\n   * @description cascader content ref\n   */\n  contentRef,\n  /**\n   * @description selected content text\n   */\n  presentText,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}