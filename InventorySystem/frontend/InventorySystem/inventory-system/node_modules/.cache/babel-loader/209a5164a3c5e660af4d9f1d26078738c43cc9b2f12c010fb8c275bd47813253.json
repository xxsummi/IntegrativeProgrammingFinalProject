{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { isVNode, render, createVNode } from 'vue';\nimport MessageConstructor from './message2.mjs';\nimport { messageTypes, MESSAGE_DEFAULT_PLACEMENT, messageDefaults, messagePlacement } from './message.mjs';\nimport { getOrCreatePlacementInstances, placementInstances } from './instance.mjs';\nimport { messageConfig } from '../../config-provider/src/config-provider.mjs';\nimport { isClient } from '@vueuse/core';\nimport { isNumber, isBoolean, isElement } from '../../../utils/types.mjs';\nimport { hasOwn, isString, isFunction } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nlet seed = 1;\nconst normalizeAppendTo = normalized => {\n  const appendTo = normalized.appendTo;\n  if (!appendTo) {\n    normalized.appendTo = document.body;\n  } else if (isString(normalized.appendTo)) {\n    let appendTo2 = document.querySelector(normalized.appendTo);\n    if (!isElement(appendTo2)) {\n      appendTo2 = document.body;\n    }\n    normalized.appendTo = appendTo2;\n  }\n};\nconst normalizePlacement = normalized => {\n  if (!normalized.placement && isString(messageConfig.placement) && messageConfig.placement) {\n    normalized.placement = messageConfig.placement;\n  }\n  if (!normalized.placement) {\n    normalized.placement = MESSAGE_DEFAULT_PLACEMENT;\n  }\n  if (!messagePlacement.includes(normalized.placement)) {\n    debugWarn(\"ElMessage\", `Invalid placement: ${normalized.placement}. Falling back to '${MESSAGE_DEFAULT_PLACEMENT}'.`);\n    normalized.placement = MESSAGE_DEFAULT_PLACEMENT;\n  }\n};\nconst normalizeOptions = params => {\n  const options = !params || isString(params) || isVNode(params) || isFunction(params) ? {\n    message: params\n  } : params;\n  const normalized = {\n    ...messageDefaults,\n    ...options\n  };\n  normalizeAppendTo(normalized);\n  normalizePlacement(normalized);\n  if (isBoolean(messageConfig.grouping) && !normalized.grouping) {\n    normalized.grouping = messageConfig.grouping;\n  }\n  if (isNumber(messageConfig.duration) && normalized.duration === 3e3) {\n    normalized.duration = messageConfig.duration;\n  }\n  if (isNumber(messageConfig.offset) && normalized.offset === 16) {\n    normalized.offset = messageConfig.offset;\n  }\n  if (isBoolean(messageConfig.showClose) && !normalized.showClose) {\n    normalized.showClose = messageConfig.showClose;\n  }\n  if (isBoolean(messageConfig.plain) && !normalized.plain) {\n    normalized.plain = messageConfig.plain;\n  }\n  return normalized;\n};\nconst closeMessage = instance => {\n  const placement = instance.props.placement || MESSAGE_DEFAULT_PLACEMENT;\n  const instances = placementInstances[placement];\n  const idx = instances.indexOf(instance);\n  if (idx === -1) return;\n  instances.splice(idx, 1);\n  const {\n    handler\n  } = instance;\n  handler.close();\n};\nconst createMessage = ({\n  appendTo,\n  ...options\n}, context) => {\n  const id = `message_${seed++}`;\n  const userOnClose = options.onClose;\n  const container = document.createElement(\"div\");\n  const props = {\n    ...options,\n    id,\n    onClose: () => {\n      userOnClose == null ? void 0 : userOnClose();\n      closeMessage(instance);\n    },\n    onDestroy: () => {\n      render(null, container);\n    }\n  };\n  const vnode = createVNode(MessageConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    default: isFunction(props.message) ? props.message : () => props.message\n  } : null);\n  vnode.appContext = context || message._context;\n  render(vnode, container);\n  appendTo.appendChild(container.firstElementChild);\n  const vm = vnode.component;\n  const handler = {\n    close: () => {\n      vm.exposed.close();\n    }\n  };\n  const instance = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: vnode.component.props\n  };\n  return instance;\n};\nconst message = (options = {}, context) => {\n  if (!isClient) return {\n    close: () => void 0\n  };\n  const normalized = normalizeOptions(options);\n  const instances = getOrCreatePlacementInstances(normalized.placement || MESSAGE_DEFAULT_PLACEMENT);\n  if (normalized.grouping && instances.length) {\n    const instance2 = instances.find(({\n      vnode: vm\n    }) => {\n      var _a;\n      return ((_a = vm.props) == null ? void 0 : _a.message) === normalized.message;\n    });\n    if (instance2) {\n      instance2.props.repeatNum += 1;\n      instance2.props.type = normalized.type;\n      return instance2.handler;\n    }\n  }\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return {\n      close: () => void 0\n    };\n  }\n  const instance = createMessage(normalized, context);\n  instances.push(instance);\n  return instance.handler;\n};\nmessageTypes.forEach(type => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options);\n    return message({\n      ...normalized,\n      type\n    }, appContext);\n  };\n});\nfunction closeAll(type) {\n  for (const placement in placementInstances) {\n    if (hasOwn(placementInstances, placement)) {\n      const instances = [...placementInstances[placement]];\n      for (const instance of instances) {\n        if (!type || type === instance.props.type) {\n          instance.handler.close();\n        }\n      }\n    }\n  }\n}\nfunction closeAllByPlacement(placement) {\n  if (!placementInstances[placement]) return;\n  const instances = [...placementInstances[placement]];\n  instances.forEach(instance => instance.handler.close());\n}\nmessage.closeAll = closeAll;\nmessage.closeAllByPlacement = closeAllByPlacement;\nmessage._context = null;\nexport { closeAll, closeAllByPlacement, message as default };","map":{"version":3,"names":["seed","normalizeAppendTo","normalized","appendTo","document","body","isString","appendTo2","querySelector","isElement","normalizePlacement","placement","messageConfig","MESSAGE_DEFAULT_PLACEMENT","messagePlacement","includes","debugWarn","normalizeOptions","params","options","isVNode","isFunction","message","messageDefaults","isBoolean","grouping","isNumber","duration","offset","showClose","plain","closeMessage","instance","props","instances","placementInstances","idx","indexOf","splice","handler","close","createMessage","context","id","userOnClose","onClose","container","createElement","onDestroy","render","vnode","createVNode","MessageConstructor","default","appContext","_context","appendChild","firstElementChild","vm","component","exposed","isClient","getOrCreatePlacementInstances","length","instance2","find","_a","repeatNum","type","max","push","messageTypes","forEach","closeAll","hasOwn","closeAllByPlacement"],"sources":["../../../../../../packages/components/message/src/method.ts"],"sourcesContent":["import { createVNode, isVNode, render } from 'vue'\nimport {\n  debugWarn,\n  hasOwn,\n  isBoolean,\n  isClient,\n  isElement,\n  isFunction,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { messageConfig } from '@element-plus/components/config-provider'\nimport MessageConstructor from './message.vue'\nimport {\n  MESSAGE_DEFAULT_PLACEMENT,\n  messageDefaults,\n  messagePlacement,\n  messageTypes,\n} from './message'\nimport { getOrCreatePlacementInstances, placementInstances } from './instance'\n\nimport type { MessageContext } from './instance'\nimport type { AppContext } from 'vue'\nimport type {\n  Message,\n  MessageFn,\n  MessageHandler,\n  MessageOptions,\n  MessageParams,\n  MessageParamsNormalized,\n  MessagePlacement,\n  MessageType,\n} from './message'\n\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst normalizeAppendTo = (normalized: MessageOptions) => {\n  const appendTo = normalized.appendTo\n  if (!appendTo) {\n    normalized.appendTo = document.body\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector<HTMLElement>(normalized.appendTo)\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n    normalized.appendTo = appendTo\n  }\n}\n\nconst normalizePlacement = (normalized: MessageOptions) => {\n  // if placement is not passed and global has config, use global config\n  if (\n    !normalized.placement &&\n    isString(messageConfig.placement) &&\n    messageConfig.placement\n  ) {\n    normalized.placement = messageConfig.placement as\n      | MessagePlacement\n      | undefined\n  }\n  // if placement is not passed and global has no config, use default config\n  if (!normalized.placement) {\n    normalized.placement = MESSAGE_DEFAULT_PLACEMENT\n  }\n  // if placement is not valid, use default config\n  if (!messagePlacement.includes(normalized.placement!)) {\n    debugWarn(\n      'ElMessage',\n      `Invalid placement: ${normalized.placement}. Falling back to '${MESSAGE_DEFAULT_PLACEMENT}'.`\n    )\n    normalized.placement = MESSAGE_DEFAULT_PLACEMENT\n  }\n}\n\nconst normalizeOptions = (params?: MessageParams) => {\n  const options: MessageOptions =\n    !params || isString(params) || isVNode(params) || isFunction(params)\n      ? { message: params }\n      : params\n\n  const normalized: MessageOptions = {\n    ...messageDefaults,\n    ...options,\n  }\n\n  normalizeAppendTo(normalized)\n  normalizePlacement(normalized)\n\n  // When grouping is configured globally,\n  // if grouping is manually set when calling message individually and it is not equal to the default value,\n  // the global configuration cannot override the current setting. default => false\n  if (isBoolean(messageConfig.grouping) && !normalized.grouping) {\n    normalized.grouping = messageConfig.grouping\n  }\n  if (isNumber(messageConfig.duration) && normalized.duration === 3000) {\n    normalized.duration = messageConfig.duration\n  }\n  if (isNumber(messageConfig.offset) && normalized.offset === 16) {\n    normalized.offset = messageConfig.offset\n  }\n  if (isBoolean(messageConfig.showClose) && !normalized.showClose) {\n    normalized.showClose = messageConfig.showClose\n  }\n  if (isBoolean(messageConfig.plain) && !normalized.plain) {\n    normalized.plain = messageConfig.plain\n  }\n\n  return normalized as MessageParamsNormalized\n}\n\nconst closeMessage = (instance: MessageContext) => {\n  const placement = instance.props.placement || MESSAGE_DEFAULT_PLACEMENT\n  const instances = placementInstances[placement]\n\n  const idx = instances.indexOf(instance)\n  if (idx === -1) return\n  instances.splice(idx, 1)\n  const { handler } = instance\n  handler.close()\n}\n\nconst createMessage = (\n  { appendTo, ...options }: MessageParamsNormalized,\n  context?: AppContext | null\n): MessageContext => {\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n\n  const container = document.createElement('div')\n\n  const props = {\n    ...options,\n    // now the zIndex will be used inside the message.vue component instead of here.\n    // zIndex: nextIndex() + options.zIndex\n    id,\n    onClose: () => {\n      userOnClose?.()\n      closeMessage(instance)\n    },\n\n    // clean message element preventing mem leak\n    onDestroy: () => {\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n      render(null, container)\n    },\n  }\n  const vnode = createVNode(\n    MessageConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? {\n          default: isFunction(props.message)\n            ? props.message\n            : () => props.message,\n        }\n      : null\n  )\n  vnode.appContext = context || message._context\n\n  render(vnode, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  appendTo.appendChild(container.firstElementChild!)\n\n  const vm = vnode.component!\n\n  const handler: MessageHandler = {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () => {\n      vm.exposed!.close()\n    },\n  }\n\n  const instance: MessageContext = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: (vnode.component as any).props,\n  }\n\n  return instance\n}\n\nconst message: MessageFn &\n  Partial<Message> & { _context: AppContext | null } = (\n  options = {},\n  context\n) => {\n  if (!isClient) return { close: () => undefined }\n\n  const normalized = normalizeOptions(options)\n  const instances = getOrCreatePlacementInstances(\n    normalized.placement || MESSAGE_DEFAULT_PLACEMENT\n  )\n\n  if (normalized.grouping && instances.length) {\n    const instance = instances.find(\n      ({ vnode: vm }) => vm.props?.message === normalized.message\n    )\n    if (instance) {\n      instance.props.repeatNum += 1\n      instance.props.type = normalized.type\n      return instance.handler\n    }\n  }\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return { close: () => undefined }\n  }\n\n  const instance = createMessage(normalized, context)\n\n  instances.push(instance)\n  return instance.handler\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options)\n    return message({ ...normalized, type }, appContext)\n  }\n})\n\nexport function closeAll(type?: MessageType): void {\n  for (const placement in placementInstances) {\n    if (hasOwn(placementInstances, placement)) {\n      // Create a copy of instances to avoid modification during iteration\n      const instances: MessageContext[] = [...placementInstances[placement]]\n      for (const instance of instances) {\n        if (!type || type === instance.props.type) {\n          instance.handler.close()\n        }\n      }\n    }\n  }\n}\n\nexport function closeAllByPlacement(placement: MessagePlacement) {\n  if (!placementInstances[placement]) return\n  // Create a copy of instances to avoid modification during iteration\n  const instances = [...placementInstances[placement]]\n  instances.forEach((instance) => instance.handler.close())\n}\n\nmessage.closeAll = closeAll\nmessage.closeAllByPlacement = closeAllByPlacement\nmessage._context = null\n\nexport default message as Message\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}