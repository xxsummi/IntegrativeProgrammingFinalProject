{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed, openBlock, createBlock, unref, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, renderSlot, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCascaderMenu\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const instance = getCurrentInstance();\n    const ns = useNamespace(\"cascader-menu\");\n    const {\n      t\n    } = useLocale();\n    const id = useId();\n    let activeNode;\n    let hoverTimer;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = ref();\n    const isEmpty = computed(() => !props.nodes.length);\n    const isLoading = computed(() => !panel.initialLoaded);\n    const menuId = computed(() => `${id.value}-${props.index}`);\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = void 0;\n    };\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElScrollbar), {\n        key: unref(menuId),\n        tag: \"ul\",\n        role: \"menu\",\n        class: normalizeClass(unref(ns).b()),\n        \"wrap-class\": unref(ns).e(\"wrap\"),\n        \"view-class\": [unref(ns).e(\"list\"), unref(ns).is(\"empty\", unref(isEmpty))],\n        onMousemove: handleMouseMove,\n        onMouseleave: clearHoverZone\n      }, {\n        default: withCtx(() => {\n          var _a;\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(__props.nodes, node => {\n            return openBlock(), createBlock(ElCascaderNode, {\n              key: node.uid,\n              node,\n              \"menu-id\": unref(menuId),\n              onExpand: handleExpand\n            }, null, 8, [\"node\", \"menu-id\"]);\n          }), 128)), unref(isLoading) ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            class: normalizeClass(unref(ns).e(\"empty-text\"))\n          }, [createVNode(unref(ElIcon), {\n            size: \"14\",\n            class: normalizeClass(unref(ns).is(\"loading\"))\n          }, {\n            default: withCtx(() => [createVNode(unref(Loading))]),\n            _: 1\n          }, 8, [\"class\"]), createTextVNode(\" \" + toDisplayString(unref(t)(\"el.cascader.loading\")), 1)], 2)) : unref(isEmpty) ? (openBlock(), createElementBlock(\"div\", {\n            key: 1,\n            class: normalizeClass(unref(ns).e(\"empty-text\"))\n          }, [renderSlot(_ctx.$slots, \"empty\", {}, () => [createTextVNode(toDisplayString(unref(t)(\"el.cascader.noData\")), 1)])], 2)) : ((_a = unref(panel)) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(Fragment, {\n            key: 2\n          }, [createCommentVNode(\" eslint-disable-next-line vue/html-self-closing \"), (openBlock(), createElementBlock(\"svg\", {\n            ref_key: \"hoverZone\",\n            ref: hoverZone,\n            class: normalizeClass(unref(ns).e(\"hover-zone\"))\n          }, null, 2))], 2112)) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"class\", \"wrap-class\", \"view-class\"]);\n    };\n  }\n});\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"menu.vue\"]]);\nexport { ElCascaderMenu as default };","map":{"version":3,"names":["name","instance","getCurrentInstance","ns","useNamespace","t","useLocale","id","useId","activeNode","hoverTimer","panel","inject","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","props","nodes","length","isLoading","initialLoaded","menuId","value","index","handleExpand","e","target","handleMouseMove","isHoverMenu","contains","clearHoverTimer","el","vnode","left","getBoundingClientRect","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      <slot name=\"empty\">{{ t('el.cascader.noData') }}</slot>\n    </div>\n    <!-- eslint-disable-next-line vue/html-self-closing -->\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useId, useLocale, useNamespace } from '@element-plus/hooks'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { CascaderNode } from './types'\nimport type { PropType } from 'vue'\n\ndefineOptions({\n  name: 'ElCascaderMenu',\n})\n\nconst props = defineProps({\n  nodes: {\n    type: Array as PropType<CascaderNode[]>,\n    required: true,\n  },\n  index: {\n    type: Number,\n    required: true,\n  },\n})\n\nconst instance = getCurrentInstance()!\nconst ns = useNamespace('cascader-menu')\n\nconst { t } = useLocale()\nconst id = useId()\nlet activeNode: HTMLElement\nlet hoverTimer: number | undefined\n\nconst panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\nconst hoverZone = ref<SVGSVGElement>()\n\nconst isEmpty = computed(() => !props.nodes.length)\nconst isLoading = computed(() => !panel.initialLoaded)\nconst menuId = computed(() => `${id.value}-${props.index}`)\n\nconst handleExpand = (e: MouseEvent) => {\n  activeNode = e.target as HTMLElement\n}\n\nconst handleMouseMove = (e: MouseEvent) => {\n  if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n  if (activeNode.contains(e.target as HTMLElement)) {\n    clearHoverTimer()\n\n    const el = instance.vnode.el as HTMLElement\n    const { left } = el.getBoundingClientRect()\n    const { offsetWidth, offsetHeight } = el\n    const startX = e.clientX - left\n    const top = activeNode.offsetTop\n    const bottom = top + activeNode.offsetHeight\n\n    hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n  } else if (!hoverTimer) {\n    hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold)\n  }\n}\n\nconst clearHoverTimer = () => {\n  if (!hoverTimer) return\n  clearTimeout(hoverTimer)\n  hoverTimer = undefined\n}\n\nconst clearHoverZone = () => {\n  if (!hoverZone.value) return\n  hoverZone.value.innerHTML = ''\n  clearHoverTimer()\n}\n</script>\n"],"mappings":";;;;;;;;;;mCAgDc;EACZA,IAAM;AACR;;;;;;;;;;;;;;;IAaA,MAAMC,QAAA,GAAWC,kBAAmB;IAC9B,MAAAC,EAAA,GAAKC,YAAA,CAAa,eAAe;IAEjC;MAAEC;IAAE,IAAIC,SAAU;IACxB,MAAMC,EAAA,GAAKC,KAAM;IACb,IAAAC,UAAA;IACA,IAAAC,UAAA;IAEE,MAAAC,KAAA,GAAQC,MAAA,CAAOC,4BAA4B;IAEjD,MAAMC,SAAA,GAAYC,GAAmB;IAErC,MAAMC,OAAA,GAAUC,QAAS,OAAM,CAACC,KAAA,CAAMC,KAAA,CAAMC,MAAM;IAClD,MAAMC,SAAY,GAAAJ,QAAA,CAAS,MAAM,CAACN,KAAA,CAAMW,aAAa;IAC/C,MAAAC,MAAA,GAASN,QAAA,CAAS,MAAM,GAAGV,EAAA,CAAGiB,KAAK,IAAIN,KAAM,CAAAO,KAAK,EAAE;IAEpD,MAAAC,YAAA,GAAgBC,CAAkB;MACtClB,UAAA,GAAakB,CAAE,CAAAC,MAAA;IAAA,CACjB;IAEM,MAAAC,eAAA,GAAmBF,CAAkB;MACzC,IAAI,CAAChB,KAAM,CAAAmB,WAAA,IAAe,CAACrB,UAAc,KAACK,SAAA,CAAUU,KAAO,EAE3D;MACkB,IAAAf,UAAA,CAAAsB,QAAA,CAAAJ,CAAA,CAAAC,MAAA;QAEVI,eAAA;QACN,MAAMC,EAAE,GAAAhC,QAAS,CAAGiC,KAAsB,CAAAD,EAAA;QACpC;UAAEE;QAAa,IAAAF,EAAA,CAAAG,qBAAiB;QAChC;UAAAC,WAAqB;UAAAC;QAAA,IAAAL,EAAA;QAC3B,MAAMM,MAAM,GAAWZ,CAAA,CAAAa,OAAA,GAAAL,IAAA;QACjB,MAAAM,GAAA,GAAAhC,UAA0B,CAAAiC,SAAA;QAEhC,MAAAC,MAAA,GAAAF,GAA4B,GAAAhC,UAAA,CAAA6B,YAAA;QAAAxB,SAAA,CAAAU,KAAA,CAAAoB,SAAA;AAC8E,uEACvCL,MAAM,IAAIE,GAAM,KAAAJ,WAAA,OAAoBI,GAAA;AAAuB,uEAAAF,MAAA,IAAAI,MAAA,KAAAN,WAAA,IAAAC,YAAA,KAAAK,MAAA;AAAA,SAEhI;MACE,YAAAjC,UAAoB;QACtBA,UAAA,GAAAmC,MAAA,CAAAC,UAAA,CAAAC,cAAA,EAAApC,KAAA,CAAAqC,MAAA,CAAAC,cAAA;MAAA;IAGF;IACE,MAAIjB,eAAa,GAAAA,CAAA;MACjB,KAAAtB,UAAuB,EACV;MACfwC,YAAA,CAAAxC,UAAA;MAEAA,UAAA;IACE,CAAI;IACJ,MAAAqC,cAA4B,GAAAA,CAAA;MACZ,KAAAjC,SAAA,CAAAU,KAAA,EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}