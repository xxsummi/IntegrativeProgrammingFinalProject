{"ast":null,"code":"import { defineComponent, computed, provide, toRefs, watch, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot, createElementBlock, Fragment, renderList, mergeProps, nextTick } from 'vue';\nimport { pick, isEqual } from 'lodash-unified';\nimport { checkboxGroupProps, checkboxGroupEmits, checkboxDefaultProps } from './checkbox-group2.mjs';\nimport { checkboxGroupContextKey } from './constants.mjs';\nimport Checkbox from './checkbox2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCheckboxGroup\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: checkboxGroupProps,\n  emits: checkboxGroupEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"checkbox\");\n    const {\n      formItem\n    } = useFormItem();\n    const {\n      inputId: groupId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const changeEvent = async value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      await nextTick();\n      emit(CHANGE_EVENT, value);\n    };\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        changeEvent(val);\n      }\n    });\n    const aliasProps = computed(() => ({\n      ...checkboxDefaultProps,\n      ...props.props\n    }));\n    const getOptionProps = option => {\n      const base = {\n        label: option[aliasProps.value.label],\n        value: option[aliasProps.value.value],\n        disabled: option[aliasProps.value.disabled]\n      };\n      return {\n        ...option,\n        ...base\n      };\n    };\n    provide(checkboxGroupContextKey, {\n      ...pick(toRefs(props), [\"size\", \"min\", \"max\", \"disabled\", \"validateEvent\", \"fill\", \"textColor\"]),\n      modelValue,\n      changeEvent\n    });\n    watch(() => props.modelValue, (newVal, oldValue) => {\n      if (props.validateEvent && !isEqual(newVal, oldValue)) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn());\n      }\n    });\n    return (_ctx, _cache) => {\n      var _a;\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        id: unref(groupId),\n        class: normalizeClass(unref(ns).b(\"group\")),\n        role: \"group\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.ariaLabel || \"checkbox-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? (_a = unref(formItem)) == null ? void 0 : _a.labelId : void 0\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\", {}, () => [(openBlock(true), createElementBlock(Fragment, null, renderList(props.options, (item, index) => {\n          return openBlock(), createBlock(Checkbox, mergeProps({\n            key: index\n          }, getOptionProps(item)), null, 16);\n        }), 128))])]),\n        _: 3\n      }, 8, [\"id\", \"class\", \"aria-label\", \"aria-labelledby\"]);\n    };\n  }\n});\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"checkbox-group.vue\"]]);\nexport { CheckboxGroup as default };","map":{"version":3,"names":["name","ns","useNamespace","formItem","useFormItem","inputId","groupId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","changeEvent","value","emit","UPDATE_MODEL_EVENT","nextTick","CHANGE_EVENT","modelValue","computed","get","set","val","aliasProps","checkboxDefaultProps","getOptionProps","option","base","label","disabled","provide","checkboxGroupContextKey","pick","toRefs","watch","newVal","oldValue","validateEvent","isEqual","validate","catch","err","debugWarn","_ctx","_cache","_a","openBlock","createBlock","resolveDynamicComponent","tag"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"\n      !isLabeledByFormItem ? ariaLabel || 'checkbox-group' : undefined\n    \"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem?.labelId : undefined\"\n  >\n    <slot>\n      <el-checkbox\n        v-for=\"(item, index) in props.options\"\n        :key=\"index\"\n        v-bind=\"getOptionProps(item)\"\n      />\n    </slot>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport {\n  checkboxDefaultProps,\n  checkboxGroupEmits,\n  checkboxGroupProps,\n} from './checkbox-group'\nimport { checkboxGroupContextKey } from './constants'\nimport ElCheckbox from './checkbox.vue'\n\nimport type { CheckboxGroupValueType } from './checkbox-group'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(checkboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\nconst ns = useNamespace('checkbox')\n\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = async (value: CheckboxGroupValueType) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  await nextTick()\n  emit(CHANGE_EVENT, value)\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxGroupValueType) {\n    changeEvent(val)\n  },\n})\n\nconst aliasProps = computed(() => ({\n  ...checkboxDefaultProps,\n  ...props.props,\n}))\nconst getOptionProps = (option: Record<string, any>) => {\n  const base = {\n    label: option[aliasProps.value.label],\n    value: option[aliasProps.value.value],\n    disabled: option[aliasProps.value.disabled],\n  }\n  return { ...option, ...base }\n}\n\nprovide(checkboxGroupContextKey, {\n  ...pick(toRefs(props), [\n    'size',\n    'min',\n    'max',\n    'disabled',\n    'validateEvent',\n    'fill',\n    'textColor',\n  ]),\n  modelValue,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal, oldValue) => {\n    if (props.validateEvent && !isEqual(newVal, oldValue)) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"],"mappings":";;;;;;;;;;mCAsCc;EACZA,IAAM;AACR;;;;;;;;;IAIM,MAAAC,EAAA,GAAKC,YAAA,CAAa,UAAU;IAE5B;MAAEC;IAAS,IAAIC,WAAY;IACjC,MAAM;MAAEC,OAAS,EAAAC,OAAA;MAASC;IAAoB,IAAIC,kBAAA,CAAmBC,KAAO;MAC1EC,eAAiB,EAAAP;IAAA,CAClB;IAEK,MAAAQ,WAAA,GAAc,MAAOC,KAAkC;MAC3DC,IAAA,CAAKC,kBAAA,EAAoBF,KAAK;MAC9B,MAAMG,QAAS;MACfF,IAAA,CAAKG,YAAA,EAAcJ,KAAK;IAAA,CAC1B;IAEA,MAAMK,UAAA,GAAaC,QAAS;MAC1BC,GAAMA,CAAA;QACJ,OAAOV,KAAM,CAAAQ,UAAA;MAAA,CACf;MACAG,IAAIC,GAA6B;QAC/BV,WAAA,CAAYU,GAAG;MAAA;IACjB,CACD;IAEK,MAAAC,UAAA,GAAaJ,QAAA,CAAS,OAAO;MACjC,GAAGK,oBAAA;MACH,GAAGd,KAAM,CAAAA;IAAA,CACT;IACI,MAAAe,cAAA,GAAkBC,MAAgC;MACtD,MAAMC,IAAO;QACXC,KAAO,EAAAF,MAAA,CAAOH,UAAW,CAAAV,KAAA,CAAMe,KAAK;QACpCf,KAAO,EAAAa,MAAA,CAAOH,UAAW,CAAAV,KAAA,CAAMA,KAAK;QACpCgB,QAAU,EAAAH,MAAA,CAAOH,UAAW,CAAAV,KAAA,CAAMgB,QAAQ;MAAA,CAC5C;MACA,OAAO;QAAE,GAAGH,MAAQ;QAAA,GAAGC;MAAK;IAAA,CAC9B;IAEAG,OAAA,CAAQC,uBAAyB;MAC/B,GAAGC,IAAA,CAAKC,MAAO,CAAAvB,KAAK,CAAG,GACrB,QACA,OACA,OACA,YACA,iBACA,QACA,YACD;MACDQ,UAAA;MACAN;IAAA,CACD;IAEDsB,KAAA,OAAAxB,KAAA,CAAAQ,UAAA,GAAAiB,MAAA,EAAAC,QAAA;MACE,IAAA1B,KAAY,CAAA2B,aAAA,KAAAC,OAAA,CAAAH,MAAA,EAAAC,QAAA;QAAAhC,QACU,oBAAAA,QAAA,CAAAmC,QAAA,WAAAC,KAAA,CAAAC,GAAA,IAAAC,SAAA;MACpB;IACE,CAAU;IACZ,QAAAC,IAAA,EAAAC,MAAA;MACF,IAAAC,EAAA;MACF,OAAAC,SAAA,IAAAC,WAAA,CAAAC,uBAAA,CAAAL,IAAA,CAAAM,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}