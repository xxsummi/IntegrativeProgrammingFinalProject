{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nconst FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=\"-1\"]),input:not([disabled]),input:not([type=\"hidden\"]),select:not([disabled]),textarea:not([disabled])`;\nconst isHTMLElement = e => {\n  if (typeof Element === \"undefined\") return false;\n  return e instanceof Element;\n};\nconst isVisible = element => {\n  const computed = getComputedStyle(element);\n  return computed.position === \"fixed\" ? false : element.offsetParent !== null;\n};\nconst obtainAllFocusableElements = element => {\n  return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter(item => isFocusable(item) && isVisible(item));\n};\nconst isFocusable = element => {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute(\"tabIndex\") !== null) {\n    return true;\n  }\n  if (element.tabIndex < 0 || element.hasAttribute(\"disabled\") || element.getAttribute(\"aria-disabled\") === \"true\") {\n    return false;\n  }\n  switch (element.nodeName) {\n    case \"A\":\n      {\n        return !!element.href && element.rel !== \"ignore\";\n      }\n    case \"INPUT\":\n      {\n        return !(element.type === \"hidden\" || element.type === \"file\");\n      }\n    case \"BUTTON\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      {\n        return true;\n      }\n    default:\n      {\n        return false;\n      }\n  }\n};\nconst triggerEvent = function (elm, name, ...opts) {\n  let eventName;\n  if (name.includes(\"mouse\") || name.includes(\"click\")) {\n    eventName = \"MouseEvents\";\n  } else if (name.includes(\"key\")) {\n    eventName = \"KeyboardEvent\";\n  } else {\n    eventName = \"HTMLEvents\";\n  }\n  const evt = document.createEvent(eventName);\n  evt.initEvent(name, ...opts);\n  elm.dispatchEvent(evt);\n  return elm;\n};\nconst isLeaf = el => !el.getAttribute(\"aria-owns\");\nconst getSibling = (el, distance, elClass) => {\n  const {\n    parentNode\n  } = el;\n  if (!parentNode) return null;\n  const siblings = parentNode.querySelectorAll(elClass);\n  const index = Array.prototype.indexOf.call(siblings, el);\n  return siblings[index + distance] || null;\n};\nconst focusElement = (el, options) => {\n  if (!el || !el.focus) return;\n  let cleanup = false;\n  if (isHTMLElement(el) && !isFocusable(el) && !el.getAttribute(\"tabindex\")) {\n    el.setAttribute(\"tabindex\", \"-1\");\n    cleanup = true;\n  }\n  el.focus(options);\n  if (isHTMLElement(el) && cleanup) {\n    el.removeAttribute(\"tabindex\");\n  }\n};\nconst focusNode = el => {\n  if (!el) return;\n  focusElement(el);\n  !isLeaf(el) && el.click();\n};\nexport { focusElement, focusNode, getSibling, isFocusable, isLeaf, isVisible, obtainAllFocusableElements, triggerEvent };","map":{"version":3,"names":["FOCUSABLE_ELEMENT_SELECTORS","isHTMLElement","e","Element","isVisible","element","computed","getComputedStyle","position","offsetParent","obtainAllFocusableElements","Array","from","querySelectorAll","filter","item","isFocusable","tabIndex","getAttribute","hasAttribute","nodeName","href","rel","type","triggerEvent","elm","name","opts","eventName","includes","evt","document","createEvent","initEvent","dispatchEvent","isLeaf","el","getSibling","distance","elClass","parentNode","siblings","index","prototype","indexOf","call","focusElement","options","focus","cleanup","setAttribute","removeAttribute","focusNode","click"],"sources":["../../../../../packages/utils/dom/aria.ts"],"sourcesContent":["const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=\"-1\"]),input:not([disabled]),input:not([type=\"hidden\"]),select:not([disabled]),textarea:not([disabled])`\n\nconst isHTMLElement = (e: unknown): e is Element => {\n  if (typeof Element === 'undefined') return false\n  return e instanceof Element\n}\n\n/**\n * Determine if the testing element is visible on screen no matter if its on the viewport or not\n */\nexport const isVisible = (element: HTMLElement) => {\n  if (process.env.NODE_ENV === 'test') return true\n  const computed = getComputedStyle(element)\n  // element.offsetParent won't work on fix positioned\n  // WARNING: potential issue here, going to need some expert advices on this issue\n  return computed.position === 'fixed' ? false : element.offsetParent !== null\n}\n\nexport const obtainAllFocusableElements = (\n  element: HTMLElement\n): HTMLElement[] => {\n  return Array.from(\n    element.querySelectorAll<HTMLElement>(FOCUSABLE_ELEMENT_SELECTORS)\n  ).filter((item: HTMLElement) => isFocusable(item) && isVisible(item))\n}\n\n/**\n * @desc Determine if target element is focusable\n * @param element {HTMLElement}\n * @returns {Boolean} true if it is focusable\n */\nexport const isFocusable = (element: HTMLElement): boolean => {\n  if (\n    element.tabIndex > 0 ||\n    (element.tabIndex === 0 && element.getAttribute('tabIndex') !== null)\n  ) {\n    return true\n  }\n  if (\n    element.tabIndex < 0 ||\n    element.hasAttribute('disabled') ||\n    element.getAttribute('aria-disabled') === 'true'\n  ) {\n    return false\n  }\n\n  switch (element.nodeName) {\n    case 'A': {\n      // casting current element to Specific HTMLElement in order to be more type precise\n      return (\n        !!(element as HTMLAnchorElement).href &&\n        (element as HTMLAnchorElement).rel !== 'ignore'\n      )\n    }\n    case 'INPUT': {\n      return !(\n        (element as HTMLInputElement).type === 'hidden' ||\n        (element as HTMLInputElement).type === 'file'\n      )\n    }\n    case 'BUTTON':\n    case 'SELECT':\n    case 'TEXTAREA': {\n      return true\n    }\n    default: {\n      return false\n    }\n  }\n}\n\n/**\n * Trigger an event\n * mouseenter, mouseleave, mouseover, keyup, change, click, etc.\n * @param  {HTMLElement} elm\n * @param  {String} name\n * @param  {*} opts\n */\nexport const triggerEvent = function (\n  elm: HTMLElement,\n  name: string,\n  ...opts: Array<boolean>\n): HTMLElement {\n  let eventName: string\n\n  if (name.includes('mouse') || name.includes('click')) {\n    eventName = 'MouseEvents'\n  } else if (name.includes('key')) {\n    eventName = 'KeyboardEvent'\n  } else {\n    eventName = 'HTMLEvents'\n  }\n  const evt = document.createEvent(eventName)\n\n  evt.initEvent(name, ...opts)\n  elm.dispatchEvent(evt)\n  return elm\n}\n\nexport const isLeaf = (el: HTMLElement) => !el.getAttribute('aria-owns')\n\nexport const getSibling = (\n  el: HTMLElement,\n  distance: number,\n  elClass: string\n) => {\n  const { parentNode } = el\n  if (!parentNode) return null\n  const siblings = parentNode.querySelectorAll(elClass)\n  const index = Array.prototype.indexOf.call(siblings, el)\n  return siblings[index + distance] || null\n}\n\nexport const focusElement = (\n  el?: HTMLElement | { focus: () => void } | null,\n  options?: FocusOptions\n) => {\n  if (!el || !el.focus) return\n  let cleanup: boolean = false\n\n  if (isHTMLElement(el) && !isFocusable(el) && !el.getAttribute('tabindex')) {\n    el.setAttribute('tabindex', '-1')\n    cleanup = true\n  }\n\n  el.focus(options)\n\n  if (isHTMLElement(el) && cleanup) {\n    el.removeAttribute('tabindex')\n  }\n}\n\nexport const focusNode = (el: HTMLElement) => {\n  if (!el) return\n  focusElement(el)\n  !isLeaf(el) && el.click()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}