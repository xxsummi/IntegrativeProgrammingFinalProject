{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { defineComponent, inject, withDirectives, cloneVNode, Comment, Fragment, createVNode, Text } from 'vue';\nimport { FORWARD_REF_INJECTION_KEY, useForwardRefDirective } from '../../../hooks/use-forward-ref/index.mjs';\nimport { NOOP, isObject } from '@vue/shared';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst NAME = \"ElOnlyChild\";\nconst OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, {\n    slots,\n    attrs\n  }) {\n    var _a;\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);\n    const forwardRefDirective = useForwardRefDirective((_a = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a : NOOP);\n    return () => {\n      var _a2;\n      const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot) return null;\n      const [firstLegitNode, length] = findFirstLegitChild(defaultSlot);\n      if (!firstLegitNode) {\n        return null;\n      }\n      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);\n    };\n  }\n});\nfunction findFirstLegitChild(node) {\n  if (!node) return [null, 0];\n  const children = node;\n  const len = children.filter(c => c.type !== Comment).length;\n  for (const child of children) {\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue;\n        case Text:\n        case \"svg\":\n          return [wrapTextContent(child), len];\n        case Fragment:\n          return findFirstLegitChild(child.children);\n        default:\n          return [child, len];\n      }\n    }\n    return [wrapTextContent(child), len];\n  }\n  return [null, 0];\n}\nfunction wrapTextContent(s) {\n  const ns = useNamespace(\"only-child\");\n  return createVNode(\"span\", {\n    \"class\": ns.e(\"content\")\n  }, [s]);\n}\nexport { OnlyChild };","map":{"version":3,"names":["NAME","OnlyChild","defineComponent","name","slots","attrs","_a","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","setForwardRef","NOOP","_a2","defaultSlot","default","call","firstLegitNode","length","findFirstLegitChild","node","children","len","filter","c","type","Comment","child","isObject","Text","wrapTextContent","Fragment","s","ns","useNamespace","e"],"sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  Comment,\n  Fragment,\n  Text,\n  cloneVNode,\n  defineComponent,\n  inject,\n  withDirectives,\n} from 'vue'\nimport { NOOP, debugWarn, isObject } from '@element-plus/utils'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n  useNamespace,\n} from '@element-plus/hooks'\n\nimport type { Ref, VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n      const [firstLegitNode, length] = findFirstLegitChild(defaultSlot)\n\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n      if (length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(\n  node: VNode[] | undefined\n): [VNode | null, number] {\n  if (!node) return [null, 0]\n  const children = node as VNode[]\n  const len = children.filter((c) => c.type !== Comment).length\n\n  for (const child of children) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n        case 'svg':\n          return [wrapTextContent(child), len]\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return [child, len]\n      }\n    }\n    return [wrapTextContent(child), len]\n  }\n  return [null, 0]\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  const ns = useNamespace('only-child')\n  return <span class={ns.e('content')}>{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"],"mappings":";;;;;;AAkBA,MAAMA,IAAI,GAAG,aAAb;AAEa,MAAAC,SAAS,GAAGC,eAAe,CAAC;EACvCC,IAAI,EAAEH,IADiC;;IAElCI,KAAA;IAAMC;EAAO;IAAS,IAAAC,EAAA;IACzB,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,yBAAD,CAAlC;IACA,MAAMC,mBAAmB,GAAGC,sBAAsB,CAChD,CAAAL,EAAA,GAAAC,mBAAqB,WAAiB,MADU,GAAlDA,mBAAA,CAAAK,aAAA,YAAAN,EAAA,GAAAO,IAAA;IAGA,OAAO,MAAM;MACX,IAAAC,GAAA;MACA,MAAKC,WAAa,IAAAD,GAAA,GAAAV,KAAA,CAAAY,OAAA,qBAAAF,GAAA,CAAAG,IAAA,CAAAb,KAAA,EAAAC,KAAA;MAClB,IAAM,CAAAU,WAAA,E;MAEN,OAAAG,cAAqB,EAAAC,MAAA,IAAAC,mBAAA,CAAAL,WAAA;MACnB,KAAAG,cAAgB;QAEjB;;;IAKD;;AAIH;;EAxBI,KAAAG,IAAA,E;EA2BE,MAAAC,QAAA,GAAAD,IAAA;EAGP,MAAAE,GAAA,GAAWD,QAAO,CAAAE,MAAP,CAAAC,CAAA,IAAAA,CAAA,CAAAC,IAAA,KAAAC,OAAA,EAAAR,MAAA;EACX,KAAM,MAAAS,KAAA,IAANN,QAAA;IACA,IAAMO,QAAc,CAAAD,KAAA,CAAC;;QAEV,KAAAD,OAAS;UAClB;QACJ,KAAAG,IAAA;QACA;UACA,QAAAC,eAAA,CAAAH,KAAA,GAAAL,GAAA;QACA,KAAAS,QAAA;UACgB,OAACZ,mBAAQ,CAAAQ,KAAA,CAAAN,QAAA;QACX;UACN,QAAAM,KAAA,EAAAL,GAAA;MACE;;IACF,QAAAQ,eAAA,CAAAH,KAAA,GAAAL,GAAA;EACA;EACE,eAAO,CAAC;;AACV,SAAAQ,gBAAAE,CAAA;EACE,MAAAC,EAAA,GAAAC,YAA0B,aAAM;;IAClC,SAAAD,EAAA,CAAAE,CAAA;EACE,IAAAH,CAAA;AATJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}